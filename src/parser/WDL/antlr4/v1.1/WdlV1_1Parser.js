// Generated from ./WdlV1_1Parser.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';
import WdlV1_1ParserListener from './WdlV1_1ParserListener.js';
const serializedATN = [4,1,111,828,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,141,8,1,1,2,1,2,1,
2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,154,8,3,1,4,1,4,1,4,1,4,3,4,160,8,
4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,3,7,172,8,7,1,8,1,8,1,9,1,9,1,
9,1,9,1,9,1,9,3,9,182,8,9,1,9,1,9,3,9,186,8,9,1,10,5,10,189,8,10,10,10,12,
10,192,9,10,1,11,1,11,5,11,196,8,11,10,11,12,11,199,9,11,1,11,1,11,1,11,
1,12,1,12,1,12,1,13,1,13,1,13,5,13,210,8,13,10,13,12,13,213,9,13,1,13,1,
13,1,13,1,13,1,13,5,13,220,8,13,10,13,12,13,223,9,13,1,13,1,13,3,13,227,
8,13,1,14,1,14,1,14,1,14,1,14,3,14,234,8,14,1,15,1,15,1,16,1,16,1,17,1,17,
1,17,1,17,1,17,1,17,5,17,246,8,17,10,17,12,17,249,9,17,1,18,1,18,1,18,1,
18,1,18,1,18,5,18,257,8,18,10,18,12,18,260,9,18,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,5,19,283,8,19,10,19,12,19,286,9,19,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,5,20,297,8,20,10,20,12,20,300,9,20,1,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,314,8,21,10,21,12,21,317,9,21,
1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,329,8,24,10,24,12,
24,332,9,24,1,24,3,24,335,8,24,3,24,337,8,24,1,24,1,24,1,24,1,24,1,24,5,
24,344,8,24,10,24,12,24,347,9,24,1,24,3,24,350,8,24,5,24,352,8,24,10,24,
12,24,355,9,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,1,24,1,24,5,24,373,8,24,10,24,12,24,376,9,24,1,24,3,24,379,
8,24,5,24,381,8,24,10,24,12,24,384,9,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,1,24,1,24,5,24,397,8,24,10,24,12,24,400,9,24,1,24,3,24,403,
8,24,5,24,405,8,24,10,24,12,24,408,9,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,1,24,1,24,5,24,421,8,24,10,24,12,24,424,9,24,1,24,3,24,427,
8,24,5,24,429,8,24,10,24,12,24,432,9,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,452,8,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,462,8,24,10,24,12,24,465,9,
24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,3,27,478,8,27,
1,27,5,27,481,8,27,10,27,12,27,484,9,27,1,28,1,28,1,28,1,28,5,28,490,8,28,
10,28,12,28,493,9,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,504,
8,29,1,30,5,30,507,8,30,10,30,12,30,510,9,30,1,31,1,31,1,31,1,31,1,31,1,
31,1,31,1,31,3,31,520,8,31,1,32,1,32,1,32,1,32,1,32,5,32,527,8,32,10,32,
12,32,530,9,32,1,32,1,32,3,32,534,8,32,1,33,1,33,1,33,1,33,1,33,5,33,541,
8,33,10,33,12,33,544,9,33,1,33,1,33,3,33,548,8,33,1,34,1,34,1,34,1,34,1,
35,1,35,1,35,1,35,1,36,1,36,1,36,5,36,561,8,36,10,36,12,36,564,9,36,1,36,
1,36,1,37,1,37,1,37,5,37,571,8,37,10,37,12,37,574,9,37,1,37,1,37,1,38,1,
38,1,38,1,38,1,39,1,39,1,39,5,39,585,8,39,10,39,12,39,588,9,39,1,39,1,39,
1,40,1,40,1,40,5,40,595,8,40,10,40,12,40,598,9,40,1,40,1,40,1,41,1,41,1,
41,5,41,605,8,41,10,41,12,41,608,9,41,1,41,1,41,1,42,5,42,613,8,42,10,42,
12,42,616,9,42,1,43,1,43,5,43,620,8,43,10,43,12,43,623,9,43,1,43,1,43,1,
43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,635,8,45,10,45,12,45,638,9,45,
1,45,1,45,1,45,1,45,1,45,1,45,5,45,646,8,45,10,45,12,45,649,9,45,1,45,1,
45,3,45,653,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,662,8,46,1,47,1,
47,1,47,1,47,4,47,668,8,47,11,47,12,47,669,1,47,1,47,1,48,1,48,1,48,1,48,
3,48,678,8,48,1,49,1,49,1,49,1,50,1,50,1,50,3,50,686,8,50,1,51,1,51,1,51,
1,51,1,51,5,51,693,8,51,10,51,12,51,696,9,51,1,51,3,51,699,8,51,5,51,701,
8,51,10,51,12,51,704,9,51,1,52,1,52,3,52,708,8,52,1,52,1,52,1,53,1,53,1,
53,1,54,1,54,1,54,5,54,718,8,54,10,54,12,54,721,9,54,1,55,1,55,1,55,3,55,
726,8,55,1,55,5,55,729,8,55,10,55,12,55,732,9,55,1,55,3,55,735,8,55,1,56,
1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,745,8,56,10,56,12,56,748,9,56,1,
56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,5,57,758,8,57,10,57,12,57,761,9,57,
1,57,1,57,1,58,1,58,1,58,5,58,768,8,58,10,58,12,58,771,9,58,1,58,1,58,1,
59,1,59,1,59,5,59,778,8,59,10,59,12,59,781,9,59,1,59,1,59,1,60,1,60,1,60,
1,60,1,60,3,60,790,8,60,1,61,1,61,1,61,1,61,5,61,796,8,61,10,61,12,61,799,
9,61,1,61,1,61,1,62,1,62,1,62,3,62,806,8,62,1,63,3,63,809,8,63,1,63,5,63,
812,8,63,10,63,12,63,815,9,63,1,63,1,63,5,63,819,8,63,10,63,12,63,822,9,
63,3,63,824,8,63,1,63,1,63,1,63,0,6,34,36,38,40,42,48,64,0,2,4,6,8,10,12,
14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
108,110,112,114,116,118,120,122,124,126,0,5,3,0,20,24,27,27,70,70,1,0,35,
36,1,0,57,58,2,0,101,101,103,103,2,0,107,107,109,109,881,0,128,1,0,0,0,2,
135,1,0,0,0,4,142,1,0,0,0,6,153,1,0,0,0,8,159,1,0,0,0,10,161,1,0,0,0,12,
164,1,0,0,0,14,171,1,0,0,0,16,173,1,0,0,0,18,185,1,0,0,0,20,190,1,0,0,0,
22,193,1,0,0,0,24,203,1,0,0,0,26,226,1,0,0,0,28,233,1,0,0,0,30,235,1,0,0,
0,32,237,1,0,0,0,34,239,1,0,0,0,36,250,1,0,0,0,38,261,1,0,0,0,40,287,1,0,
0,0,42,301,1,0,0,0,44,318,1,0,0,0,46,320,1,0,0,0,48,451,1,0,0,0,50,466,1,
0,0,0,52,471,1,0,0,0,54,474,1,0,0,0,56,485,1,0,0,0,58,503,1,0,0,0,60,508,
1,0,0,0,62,519,1,0,0,0,64,533,1,0,0,0,66,547,1,0,0,0,68,549,1,0,0,0,70,553,
1,0,0,0,72,557,1,0,0,0,74,567,1,0,0,0,76,577,1,0,0,0,78,581,1,0,0,0,80,591,
1,0,0,0,82,601,1,0,0,0,84,614,1,0,0,0,86,617,1,0,0,0,88,627,1,0,0,0,90,652,
1,0,0,0,92,661,1,0,0,0,94,663,1,0,0,0,96,677,1,0,0,0,98,679,1,0,0,0,100,
682,1,0,0,0,102,687,1,0,0,0,104,705,1,0,0,0,106,711,1,0,0,0,108,714,1,0,
0,0,110,722,1,0,0,0,112,736,1,0,0,0,114,751,1,0,0,0,116,764,1,0,0,0,118,
774,1,0,0,0,120,789,1,0,0,0,122,791,1,0,0,0,124,805,1,0,0,0,126,808,1,0,
0,0,128,129,5,26,0,0,129,130,5,42,0,0,130,131,3,8,4,0,131,132,5,60,0,0,132,
133,3,8,4,0,133,134,5,43,0,0,134,1,1,0,0,0,135,136,5,25,0,0,136,137,5,42,
0,0,137,138,3,8,4,0,138,140,5,43,0,0,139,141,5,57,0,0,140,139,1,0,0,0,140,
141,1,0,0,0,141,3,1,0,0,0,142,143,5,31,0,0,143,144,5,42,0,0,144,145,3,8,
4,0,145,146,5,60,0,0,146,147,3,8,4,0,147,148,5,43,0,0,148,5,1,0,0,0,149,
154,3,2,1,0,150,154,3,0,0,0,151,154,3,4,2,0,152,154,7,0,0,0,153,149,1,0,
0,0,153,150,1,0,0,0,153,151,1,0,0,0,153,152,1,0,0,0,154,7,1,0,0,0,155,156,
3,6,3,0,156,157,5,55,0,0,157,160,1,0,0,0,158,160,3,6,3,0,159,155,1,0,0,0,
159,158,1,0,0,0,160,9,1,0,0,0,161,162,3,8,4,0,162,163,5,70,0,0,163,11,1,
0,0,0,164,165,3,8,4,0,165,166,5,70,0,0,166,167,5,52,0,0,167,168,3,30,15,
0,168,13,1,0,0,0,169,172,3,10,5,0,170,172,3,12,6,0,171,169,1,0,0,0,171,170,
1,0,0,0,172,15,1,0,0,0,173,174,7,1,0,0,174,17,1,0,0,0,175,176,5,37,0,0,176,
177,5,52,0,0,177,186,3,26,13,0,178,181,5,30,0,0,179,182,3,26,13,0,180,182,
3,16,8,0,181,179,1,0,0,0,181,180,1,0,0,0,182,186,1,0,0,0,183,184,5,29,0,
0,184,186,3,26,13,0,185,175,1,0,0,0,185,178,1,0,0,0,185,183,1,0,0,0,186,
19,1,0,0,0,187,189,5,71,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,
0,0,190,191,1,0,0,0,191,21,1,0,0,0,192,190,1,0,0,0,193,197,5,77,0,0,194,
196,3,18,9,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,
0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,3,30,15,0,201,202,5,41,0,0,202,
23,1,0,0,0,203,204,3,22,11,0,204,205,3,20,10,0,205,25,1,0,0,0,206,207,5,
68,0,0,207,211,3,20,10,0,208,210,3,24,12,0,209,208,1,0,0,0,210,213,1,0,0,
0,211,209,1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,215,
5,68,0,0,215,227,1,0,0,0,216,217,5,67,0,0,217,221,3,20,10,0,218,220,3,24,
12,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,
224,1,0,0,0,223,221,1,0,0,0,224,225,5,67,0,0,225,227,1,0,0,0,226,206,1,0,
0,0,226,216,1,0,0,0,227,27,1,0,0,0,228,234,5,37,0,0,229,234,3,16,8,0,230,
234,3,26,13,0,231,234,5,34,0,0,232,234,5,70,0,0,233,228,1,0,0,0,233,229,
1,0,0,0,233,230,1,0,0,0,233,231,1,0,0,0,233,232,1,0,0,0,234,29,1,0,0,0,235,
236,3,32,16,0,236,31,1,0,0,0,237,238,3,34,17,0,238,33,1,0,0,0,239,240,6,
17,-1,0,240,241,3,36,18,0,241,247,1,0,0,0,242,243,10,2,0,0,243,244,5,54,
0,0,244,246,3,36,18,0,245,242,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,
248,1,0,0,0,248,35,1,0,0,0,249,247,1,0,0,0,250,251,6,18,-1,0,251,252,3,38,
19,0,252,258,1,0,0,0,253,254,10,2,0,0,254,255,5,53,0,0,255,257,3,38,19,0,
256,253,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,37,1,
0,0,0,260,258,1,0,0,0,261,262,6,19,-1,0,262,263,3,40,20,0,263,284,1,0,0,
0,264,265,10,7,0,0,265,266,5,50,0,0,266,283,3,40,20,0,267,268,10,6,0,0,268,
269,5,51,0,0,269,283,3,40,20,0,270,271,10,5,0,0,271,272,5,49,0,0,272,283,
3,40,20,0,273,274,10,4,0,0,274,275,5,48,0,0,275,283,3,40,20,0,276,277,10,
3,0,0,277,278,5,46,0,0,278,283,3,40,20,0,279,280,10,2,0,0,280,281,5,47,0,
0,281,283,3,40,20,0,282,264,1,0,0,0,282,267,1,0,0,0,282,270,1,0,0,0,282,
273,1,0,0,0,282,276,1,0,0,0,282,279,1,0,0,0,283,286,1,0,0,0,284,282,1,0,
0,0,284,285,1,0,0,0,285,39,1,0,0,0,286,284,1,0,0,0,287,288,6,20,-1,0,288,
289,3,42,21,0,289,298,1,0,0,0,290,291,10,3,0,0,291,292,5,57,0,0,292,297,
3,42,21,0,293,294,10,2,0,0,294,295,5,58,0,0,295,297,3,42,21,0,296,290,1,
0,0,0,296,293,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,
41,1,0,0,0,300,298,1,0,0,0,301,302,6,21,-1,0,302,303,3,44,22,0,303,315,1,
0,0,0,304,305,10,4,0,0,305,306,5,56,0,0,306,314,3,44,22,0,307,308,10,3,0,
0,308,309,5,65,0,0,309,314,3,44,22,0,310,311,10,2,0,0,311,312,5,66,0,0,312,
314,3,44,22,0,313,304,1,0,0,0,313,307,1,0,0,0,313,310,1,0,0,0,314,317,1,
0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,43,1,0,0,0,317,315,1,0,0,0,318,
319,3,48,24,0,319,45,1,0,0,0,320,321,5,70,0,0,321,47,1,0,0,0,322,323,6,24,
-1,0,323,324,5,70,0,0,324,336,5,38,0,0,325,330,3,30,15,0,326,327,5,60,0,
0,327,329,3,30,15,0,328,326,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,330,
331,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,333,335,5,60,0,0,334,333,1,0,
0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,325,1,0,0,0,336,337,1,0,0,0,337,
338,1,0,0,0,338,452,5,39,0,0,339,353,5,42,0,0,340,345,3,30,15,0,341,342,
5,60,0,0,342,344,3,30,15,0,343,341,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,
0,345,346,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,350,5,60,0,0,349,348,
1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,340,1,0,0,0,352,355,1,0,0,0,
353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,353,1,0,0,0,356,452,
5,43,0,0,357,358,5,38,0,0,358,359,3,30,15,0,359,360,5,60,0,0,360,361,3,30,
15,0,361,362,5,39,0,0,362,452,1,0,0,0,363,382,5,40,0,0,364,365,3,30,15,0,
365,366,5,45,0,0,366,374,3,30,15,0,367,368,5,60,0,0,368,369,3,30,15,0,369,
370,5,45,0,0,370,371,3,30,15,0,371,373,1,0,0,0,372,367,1,0,0,0,373,376,1,
0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,377,
379,5,60,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,364,1,0,
0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,
382,1,0,0,0,385,452,5,41,0,0,386,387,5,28,0,0,387,406,5,40,0,0,388,389,3,
46,23,0,389,390,5,45,0,0,390,398,3,30,15,0,391,392,5,60,0,0,392,393,3,46,
23,0,393,394,5,45,0,0,394,395,3,30,15,0,395,397,1,0,0,0,396,391,1,0,0,0,
397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,402,1,0,0,0,400,398,
1,0,0,0,401,403,5,60,0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,
404,388,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,
1,0,0,0,408,406,1,0,0,0,409,452,5,41,0,0,410,411,5,70,0,0,411,430,5,40,0,
0,412,413,3,46,23,0,413,414,5,45,0,0,414,422,3,30,15,0,415,416,5,60,0,0,
416,417,3,46,23,0,417,418,5,45,0,0,418,419,3,30,15,0,419,421,1,0,0,0,420,
415,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,426,1,0,
0,0,424,422,1,0,0,0,425,427,5,60,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,
429,1,0,0,0,428,412,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,
0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,452,5,41,0,0,434,435,5,9,0,0,435,
436,3,30,15,0,436,437,5,10,0,0,437,438,3,30,15,0,438,439,5,11,0,0,439,440,
3,30,15,0,440,452,1,0,0,0,441,442,5,38,0,0,442,443,3,30,15,0,443,444,5,39,
0,0,444,452,1,0,0,0,445,446,5,63,0,0,446,452,3,30,15,0,447,448,7,2,0,0,448,
452,3,30,15,0,449,452,3,28,14,0,450,452,5,70,0,0,451,322,1,0,0,0,451,339,
1,0,0,0,451,357,1,0,0,0,451,363,1,0,0,0,451,386,1,0,0,0,451,410,1,0,0,0,
451,434,1,0,0,0,451,441,1,0,0,0,451,445,1,0,0,0,451,447,1,0,0,0,451,449,
1,0,0,0,451,450,1,0,0,0,452,463,1,0,0,0,453,454,10,6,0,0,454,455,5,42,0,
0,455,456,3,30,15,0,456,457,5,43,0,0,457,462,1,0,0,0,458,459,10,5,0,0,459,
460,5,62,0,0,460,462,5,70,0,0,461,453,1,0,0,0,461,458,1,0,0,0,462,465,1,
0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,49,1,0,0,0,465,463,1,0,0,0,466,
467,5,12,0,0,467,468,5,70,0,0,468,469,5,13,0,0,469,470,5,70,0,0,470,51,1,
0,0,0,471,472,5,13,0,0,472,473,5,70,0,0,473,53,1,0,0,0,474,475,5,3,0,0,475,
477,3,26,13,0,476,478,3,52,26,0,477,476,1,0,0,0,477,478,1,0,0,0,478,482,
1,0,0,0,479,481,3,50,25,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,
0,482,483,1,0,0,0,483,55,1,0,0,0,484,482,1,0,0,0,485,486,5,6,0,0,486,487,
5,70,0,0,487,491,5,40,0,0,488,490,3,10,5,0,489,488,1,0,0,0,490,493,1,0,0,
0,491,489,1,0,0,0,491,492,1,0,0,0,492,494,1,0,0,0,493,491,1,0,0,0,494,495,
5,41,0,0,495,57,1,0,0,0,496,504,5,91,0,0,497,504,5,88,0,0,498,504,5,89,0,
0,499,504,5,90,0,0,500,504,3,62,31,0,501,504,3,66,33,0,502,504,3,64,32,0,
503,496,1,0,0,0,503,497,1,0,0,0,503,498,1,0,0,0,503,499,1,0,0,0,503,500,
1,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,59,1,0,0,0,505,507,5,99,0,0,
506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,509,61,1,
0,0,0,510,508,1,0,0,0,511,512,5,93,0,0,512,513,3,60,30,0,513,514,5,93,0,
0,514,520,1,0,0,0,515,516,5,92,0,0,516,517,3,60,30,0,517,518,5,92,0,0,518,
520,1,0,0,0,519,511,1,0,0,0,519,515,1,0,0,0,520,63,1,0,0,0,521,534,5,95,
0,0,522,523,5,96,0,0,523,528,3,58,29,0,524,525,5,102,0,0,525,527,3,58,29,
0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,
1,0,0,0,530,528,1,0,0,0,531,532,7,3,0,0,532,534,1,0,0,0,533,521,1,0,0,0,
533,522,1,0,0,0,534,65,1,0,0,0,535,548,5,94,0,0,536,537,5,97,0,0,537,542,
3,68,34,0,538,539,5,108,0,0,539,541,3,68,34,0,540,538,1,0,0,0,541,544,1,
0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,542,1,0,0,0,545,
546,7,4,0,0,546,548,1,0,0,0,547,535,1,0,0,0,547,536,1,0,0,0,548,67,1,0,0,
0,549,550,5,105,0,0,550,551,5,106,0,0,551,552,3,58,29,0,552,69,1,0,0,0,553,
554,5,83,0,0,554,555,5,84,0,0,555,556,3,58,29,0,556,71,1,0,0,0,557,558,5,
17,0,0,558,562,5,80,0,0,559,561,3,70,35,0,560,559,1,0,0,0,561,564,1,0,0,
0,562,560,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,562,1,0,0,0,565,566,
5,85,0,0,566,73,1,0,0,0,567,568,5,18,0,0,568,572,5,80,0,0,569,571,3,70,35,
0,570,569,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,575,
1,0,0,0,574,572,1,0,0,0,575,576,5,85,0,0,576,75,1,0,0,0,577,578,5,70,0,0,
578,579,5,45,0,0,579,580,3,30,15,0,580,77,1,0,0,0,581,582,5,19,0,0,582,586,
5,40,0,0,583,585,3,76,38,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,
0,586,587,1,0,0,0,587,589,1,0,0,0,588,586,1,0,0,0,589,590,5,41,0,0,590,79,
1,0,0,0,591,592,5,15,0,0,592,596,5,40,0,0,593,595,3,14,7,0,594,593,1,0,0,
0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,596,
1,0,0,0,599,600,5,41,0,0,600,81,1,0,0,0,601,602,5,16,0,0,602,606,5,40,0,
0,603,605,3,12,6,0,604,603,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,
1,0,0,0,607,609,1,0,0,0,608,606,1,0,0,0,609,610,5,41,0,0,610,83,1,0,0,0,
611,613,5,79,0,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,
1,0,0,0,615,85,1,0,0,0,616,614,1,0,0,0,617,621,5,77,0,0,618,620,3,18,9,0,
619,618,1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,624,
1,0,0,0,623,621,1,0,0,0,624,625,3,30,15,0,625,626,5,41,0,0,626,87,1,0,0,
0,627,628,3,86,43,0,628,629,3,84,42,0,629,89,1,0,0,0,630,631,5,33,0,0,631,
632,5,74,0,0,632,636,3,84,42,0,633,635,3,88,44,0,634,633,1,0,0,0,635,638,
1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,636,1,0,0,0,
639,640,5,78,0,0,640,653,1,0,0,0,641,642,5,33,0,0,642,643,5,73,0,0,643,647,
3,84,42,0,644,646,3,88,44,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,
0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,647,1,0,0,0,650,651,5,78,0,0,651,
653,1,0,0,0,652,630,1,0,0,0,652,641,1,0,0,0,653,91,1,0,0,0,654,662,3,80,
40,0,655,662,3,82,41,0,656,662,3,90,45,0,657,662,3,78,39,0,658,662,3,12,
6,0,659,662,3,72,36,0,660,662,3,74,37,0,661,654,1,0,0,0,661,655,1,0,0,0,
661,656,1,0,0,0,661,657,1,0,0,0,661,658,1,0,0,0,661,659,1,0,0,0,661,660,
1,0,0,0,662,93,1,0,0,0,663,664,5,5,0,0,664,665,5,70,0,0,665,667,5,40,0,0,
666,668,3,92,46,0,667,666,1,0,0,0,668,669,1,0,0,0,669,667,1,0,0,0,669,670,
1,0,0,0,670,671,1,0,0,0,671,672,5,41,0,0,672,95,1,0,0,0,673,678,3,12,6,0,
674,678,3,110,55,0,675,678,3,112,56,0,676,678,3,114,57,0,677,673,1,0,0,0,
677,674,1,0,0,0,677,675,1,0,0,0,677,676,1,0,0,0,678,97,1,0,0,0,679,680,5,
13,0,0,680,681,5,70,0,0,681,99,1,0,0,0,682,685,5,70,0,0,683,684,5,52,0,0,
684,686,3,30,15,0,685,683,1,0,0,0,685,686,1,0,0,0,686,101,1,0,0,0,687,688,
5,15,0,0,688,702,5,45,0,0,689,694,3,100,50,0,690,691,5,60,0,0,691,693,3,
100,50,0,692,690,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,
695,698,1,0,0,0,696,694,1,0,0,0,697,699,5,60,0,0,698,697,1,0,0,0,698,699,
1,0,0,0,699,701,1,0,0,0,700,689,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,
702,703,1,0,0,0,703,103,1,0,0,0,704,702,1,0,0,0,705,707,5,40,0,0,706,708,
3,102,51,0,707,706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,710,5,41,
0,0,710,105,1,0,0,0,711,712,5,32,0,0,712,713,5,70,0,0,713,107,1,0,0,0,714,
719,5,70,0,0,715,716,5,62,0,0,716,718,5,70,0,0,717,715,1,0,0,0,718,721,1,
0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,109,1,0,0,0,721,719,1,0,0,0,722,
723,5,8,0,0,723,725,3,108,54,0,724,726,3,98,49,0,725,724,1,0,0,0,725,726,
1,0,0,0,726,730,1,0,0,0,727,729,3,106,53,0,728,727,1,0,0,0,729,732,1,0,0,
0,730,728,1,0,0,0,730,731,1,0,0,0,731,734,1,0,0,0,732,730,1,0,0,0,733,735,
3,104,52,0,734,733,1,0,0,0,734,735,1,0,0,0,735,111,1,0,0,0,736,737,5,7,0,
0,737,738,5,38,0,0,738,739,5,70,0,0,739,740,5,14,0,0,740,741,3,30,15,0,741,
742,5,39,0,0,742,746,5,40,0,0,743,745,3,96,48,0,744,743,1,0,0,0,745,748,
1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,
749,750,5,41,0,0,750,113,1,0,0,0,751,752,5,9,0,0,752,753,5,38,0,0,753,754,
3,30,15,0,754,755,5,39,0,0,755,759,5,40,0,0,756,758,3,96,48,0,757,756,1,
0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,762,1,0,0,0,761,
759,1,0,0,0,762,763,5,41,0,0,763,115,1,0,0,0,764,765,5,15,0,0,765,769,5,
40,0,0,766,768,3,14,7,0,767,766,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,
769,770,1,0,0,0,770,772,1,0,0,0,771,769,1,0,0,0,772,773,5,41,0,0,773,117,
1,0,0,0,774,775,5,16,0,0,775,779,5,40,0,0,776,778,3,12,6,0,777,776,1,0,0,
0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,779,
1,0,0,0,782,783,5,41,0,0,783,119,1,0,0,0,784,790,3,116,58,0,785,790,3,118,
59,0,786,790,3,96,48,0,787,790,3,72,36,0,788,790,3,74,37,0,789,784,1,0,0,
0,789,785,1,0,0,0,789,786,1,0,0,0,789,787,1,0,0,0,789,788,1,0,0,0,790,121,
1,0,0,0,791,792,5,4,0,0,792,793,5,70,0,0,793,797,5,40,0,0,794,796,3,120,
60,0,795,794,1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,
800,1,0,0,0,799,797,1,0,0,0,800,801,5,41,0,0,801,123,1,0,0,0,802,806,3,54,
27,0,803,806,3,56,28,0,804,806,3,94,47,0,805,802,1,0,0,0,805,803,1,0,0,0,
805,804,1,0,0,0,806,125,1,0,0,0,807,809,5,2,0,0,808,807,1,0,0,0,808,809,
1,0,0,0,809,813,1,0,0,0,810,812,3,124,62,0,811,810,1,0,0,0,812,815,1,0,0,
0,813,811,1,0,0,0,813,814,1,0,0,0,814,823,1,0,0,0,815,813,1,0,0,0,816,820,
3,122,61,0,817,819,3,124,62,0,818,817,1,0,0,0,819,822,1,0,0,0,820,818,1,
0,0,0,820,821,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,823,816,1,0,0,0,823,
824,1,0,0,0,824,825,1,0,0,0,825,826,5,0,0,1,826,127,1,0,0,0,81,140,153,159,
171,181,185,190,197,211,221,226,233,247,258,282,284,296,298,313,315,330,
334,336,345,349,353,374,378,382,398,402,406,422,426,430,451,461,463,477,
482,491,503,508,519,528,533,542,547,562,572,586,596,606,614,621,636,647,
652,661,669,677,685,694,698,702,707,719,725,730,734,746,759,769,779,789,
797,805,808,813,820,823];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class WdlV1_1Parser extends antlr4.Parser {

    static grammarFileName = "WdlV1_1Parser.g4";
    static literalNames = [ null, null, "'version 1.1'", "'import'", "'workflow'", 
                            "'task'", "'struct'", "'scatter'", "'call'", 
                            "'if'", "'then'", "'else'", "'alias'", "'as'", 
                            "'in'", "'input'", "'output'", "'parameter_meta'", 
                            "'meta'", "'runtime'", "'Boolean'", "'Int'", 
                            "'Float'", "'String'", "'File'", "'Array'", 
                            "'Map'", "'Object'", "'object'", "'sep='", "'default='", 
                            "'Pair'", "'after'", "'command'", "'None'", 
                            null, null, null, "'('", "')'", null, null, 
                            "'['", null, "'\\'", null, "'<'", "'>'", "'>='", 
                            "'<='", "'=='", "'!='", "'='", "'&&'", "'||'", 
                            "'?'", "'*'", "'+'", "'-'", null, null, "';'", 
                            "'.'", "'!'", null, "'/'", "'%'", null, null, 
                            null, null, null, null, "'<<<'", null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "'null'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, "'\\>>>'" ];
    static symbolicNames = [ null, "LINE_COMMENT", "VERSION", "IMPORT", 
                             "WORKFLOW", "TASK", "STRUCT", "SCATTER", "CALL", 
                             "IF", "THEN", "ELSE", "ALIAS", "AS", "In", 
                             "INPUT", "OUTPUT", "PARAMETERMETA", "META", 
                             "RUNTIME", "BOOLEAN", "INT", "FLOAT", "STRING", 
                             "FILE", "ARRAY", "MAP", "OBJECT", "OBJECTLITERAL", 
                             "SEPEQUAL", "DEFAULTEQUAL", "PAIR", "AFTER", 
                             "COMMAND", "NONELITERAL", "IntLiteral", "FloatLiteral", 
                             "BoolLiteral", "LPAREN", "RPAREN", "LBRACE", 
                             "RBRACE", "LBRACK", "RBRACK", "ESC", "COLON", 
                             "LT", "GT", "GTE", "LTE", "EQUALITY", "NOTEQUAL", 
                             "EQUAL", "AND", "OR", "OPTIONAL", "STAR", "PLUS", 
                             "MINUS", "DOLLAR", "COMMA", "SEMI", "DOT", 
                             "NOT", "TILDE", "DIVIDE", "MOD", "SQUOTE", 
                             "DQUOTE", "WHITESPACE", "Identifier", "StringPart", 
                             "BeginWhitespace", "BeginHereDoc", "BeginLBrace", 
                             "HereDocUnicodeEscape", "CommandUnicodeEscape", 
                             "StringCommandStart", "EndCommand", "CommandStringPart", 
                             "BeginMeta", "MetaWhitespace", "MetaBodyComment", 
                             "MetaIdentifier", "MetaColon", "EndMeta", "MetaBodyWhitespace", 
                             "MetaValueComment", "MetaBool", "MetaInt", 
                             "MetaFloat", "MetaNull", "MetaSquote", "MetaDquote", 
                             "MetaEmptyObject", "MetaEmptyArray", "MetaLbrack", 
                             "MetaLbrace", "MetaValueWhitespace", "MetaStringPart", 
                             "MetaArrayComment", "MetaArrayCommaRbrack", 
                             "MetaArrayComma", "MetaRbrack", "MetaArrayWhitespace", 
                             "MetaObjectIdentifier", "MetaObjectColon", 
                             "MetaObjectCommaRbrace", "MetaObjectComma", 
                             "MetaRbrace", "MetaObjectWhitespace", "HereDocEscapedEnd" ];
    static ruleNames = [ "map_type", "array_type", "pair_type", "type_base", 
                         "wdl_type", "unbound_decls", "bound_decls", "any_decls", 
                         "number", "expression_placeholder_option", "string_part", 
                         "string_expr_part", "string_expr_with_string_part", 
                         "string", "primitive_literal", "expr", "expr_infix", 
                         "expr_infix0", "expr_infix1", "expr_infix2", "expr_infix3", 
                         "expr_infix4", "expr_infix5", "member", "expr_core", 
                         "import_alias", "import_as", "import_doc", "struct", 
                         "meta_value", "meta_string_part", "meta_string", 
                         "meta_array", "meta_object", "meta_object_kv", 
                         "meta_kv", "parameter_meta", "meta", "task_runtime_kv", 
                         "task_runtime", "task_input", "task_output", "task_command_string_part", 
                         "task_command_expr_part", "task_command_expr_with_string", 
                         "task_command", "task_element", "task", "inner_workflow_element", 
                         "call_alias", "call_input", "call_inputs", "call_body", 
                         "call_after", "call_name", "call", "scatter", "conditional", 
                         "workflow_input", "workflow_output", "workflow_element", 
                         "workflow", "document_element", "document" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = WdlV1_1Parser.ruleNames;
        this.literalNames = WdlV1_1Parser.literalNames;
        this.symbolicNames = WdlV1_1Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 17:
    	    		return this.expr_infix0_sempred(localctx, predIndex);
    	case 18:
    	    		return this.expr_infix1_sempred(localctx, predIndex);
    	case 19:
    	    		return this.expr_infix2_sempred(localctx, predIndex);
    	case 20:
    	    		return this.expr_infix3_sempred(localctx, predIndex);
    	case 21:
    	    		return this.expr_infix4_sempred(localctx, predIndex);
    	case 24:
    	    		return this.expr_core_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_infix0_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_infix1_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_infix2_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 7);
    		case 3:
    			return this.precpred(this._ctx, 6);
    		case 4:
    			return this.precpred(this._ctx, 5);
    		case 5:
    			return this.precpred(this._ctx, 4);
    		case 6:
    			return this.precpred(this._ctx, 3);
    		case 7:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_infix3_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 3);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_infix4_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 4);
    		case 11:
    			return this.precpred(this._ctx, 3);
    		case 12:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_core_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 6);
    		case 14:
    			return this.precpred(this._ctx, 5);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	map_type() {
	    let localctx = new Map_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, WdlV1_1Parser.RULE_map_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 128;
	        this.match(WdlV1_1Parser.MAP);
	        this.state = 129;
	        this.match(WdlV1_1Parser.LBRACK);
	        this.state = 130;
	        this.wdl_type();
	        this.state = 131;
	        this.match(WdlV1_1Parser.COMMA);
	        this.state = 132;
	        this.wdl_type();
	        this.state = 133;
	        this.match(WdlV1_1Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_type() {
	    let localctx = new Array_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, WdlV1_1Parser.RULE_array_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 135;
	        this.match(WdlV1_1Parser.ARRAY);
	        this.state = 136;
	        this.match(WdlV1_1Parser.LBRACK);
	        this.state = 137;
	        this.wdl_type();
	        this.state = 138;
	        this.match(WdlV1_1Parser.RBRACK);
	        this.state = 140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 139;
	            this.match(WdlV1_1Parser.PLUS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pair_type() {
	    let localctx = new Pair_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, WdlV1_1Parser.RULE_pair_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 142;
	        this.match(WdlV1_1Parser.PAIR);
	        this.state = 143;
	        this.match(WdlV1_1Parser.LBRACK);
	        this.state = 144;
	        this.wdl_type();
	        this.state = 145;
	        this.match(WdlV1_1Parser.COMMA);
	        this.state = 146;
	        this.wdl_type();
	        this.state = 147;
	        this.match(WdlV1_1Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_base() {
	    let localctx = new Type_baseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, WdlV1_1Parser.RULE_type_base);
	    var _la = 0;
	    try {
	        this.state = 153;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 149;
	            this.array_type();
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 150;
	            this.map_type();
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 151;
	            this.pair_type();
	            break;
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 27:
	        case 70:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 152;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 166723584) !== 0) || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wdl_type() {
	    let localctx = new Wdl_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, WdlV1_1Parser.RULE_wdl_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 159;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 155;
	            this.type_base();
	            this.state = 156;
	            this.match(WdlV1_1Parser.OPTIONAL);
	            break;

	        case 2:
	            this.state = 158;
	            this.type_base();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbound_decls() {
	    let localctx = new Unbound_declsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, WdlV1_1Parser.RULE_unbound_decls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 161;
	        this.wdl_type();
	        this.state = 162;
	        this.match(WdlV1_1Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bound_decls() {
	    let localctx = new Bound_declsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, WdlV1_1Parser.RULE_bound_decls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 164;
	        this.wdl_type();
	        this.state = 165;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 166;
	        this.match(WdlV1_1Parser.EQUAL);
	        this.state = 167;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	any_decls() {
	    let localctx = new Any_declsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, WdlV1_1Parser.RULE_any_decls);
	    try {
	        this.state = 171;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 169;
	            this.unbound_decls();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 170;
	            this.bound_decls();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, WdlV1_1Parser.RULE_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        _la = this._input.LA(1);
	        if(!(_la===35 || _la===36)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_placeholder_option() {
	    let localctx = new Expression_placeholder_optionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, WdlV1_1Parser.RULE_expression_placeholder_option);
	    try {
	        this.state = 185;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 175;
	            this.match(WdlV1_1Parser.BoolLiteral);
	            this.state = 176;
	            this.match(WdlV1_1Parser.EQUAL);
	            this.state = 177;
	            this.string();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 178;
	            this.match(WdlV1_1Parser.DEFAULTEQUAL);
	            this.state = 181;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 67:
	            case 68:
	                this.state = 179;
	                this.string();
	                break;
	            case 35:
	            case 36:
	                this.state = 180;
	                this.number();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 183;
	            this.match(WdlV1_1Parser.SEPEQUAL);
	            this.state = 184;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_part() {
	    let localctx = new String_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, WdlV1_1Parser.RULE_string_part);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 190;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===71) {
	            this.state = 187;
	            this.match(WdlV1_1Parser.StringPart);
	            this.state = 192;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_expr_part() {
	    let localctx = new String_expr_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, WdlV1_1Parser.RULE_string_expr_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.match(WdlV1_1Parser.StringCommandStart);
	        this.state = 197;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 194;
	                this.expression_placeholder_option(); 
	            }
	            this.state = 199;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	        }

	        this.state = 200;
	        this.expr();
	        this.state = 201;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_expr_with_string_part() {
	    let localctx = new String_expr_with_string_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, WdlV1_1Parser.RULE_string_expr_with_string_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 203;
	        this.string_expr_part();
	        this.state = 204;
	        this.string_part();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, WdlV1_1Parser.RULE_string);
	    var _la = 0;
	    try {
	        this.state = 226;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 206;
	            this.match(WdlV1_1Parser.DQUOTE);
	            this.state = 207;
	            this.string_part();
	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===77) {
	                this.state = 208;
	                this.string_expr_with_string_part();
	                this.state = 213;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 214;
	            this.match(WdlV1_1Parser.DQUOTE);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 216;
	            this.match(WdlV1_1Parser.SQUOTE);
	            this.state = 217;
	            this.string_part();
	            this.state = 221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===77) {
	                this.state = 218;
	                this.string_expr_with_string_part();
	                this.state = 223;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 224;
	            this.match(WdlV1_1Parser.SQUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitive_literal() {
	    let localctx = new Primitive_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, WdlV1_1Parser.RULE_primitive_literal);
	    try {
	        this.state = 233;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 228;
	            this.match(WdlV1_1Parser.BoolLiteral);
	            break;
	        case 35:
	        case 36:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 229;
	            this.number();
	            break;
	        case 67:
	        case 68:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 230;
	            this.string();
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 231;
	            this.match(WdlV1_1Parser.NONELITERAL);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 232;
	            this.match(WdlV1_1Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, WdlV1_1Parser.RULE_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 235;
	        this.expr_infix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_infix() {
	    let localctx = new Expr_infixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, WdlV1_1Parser.RULE_expr_infix);
	    try {
	        localctx = new Infix0Context(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237;
	        this.expr_infix0(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr_infix0(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_infix0Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 34;
	    this.enterRecursionRule(localctx, 34, WdlV1_1Parser.RULE_expr_infix0, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Infix1Context(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 240;
	        this.expr_infix1(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 247;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new LorContext(this, new Expr_infix0Context(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix0);
	                this.state = 242;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 243;
	                this.match(WdlV1_1Parser.OR);
	                this.state = 244;
	                this.expr_infix1(0); 
	            }
	            this.state = 249;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expr_infix1(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_infix1Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 36;
	    this.enterRecursionRule(localctx, 36, WdlV1_1Parser.RULE_expr_infix1, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Infix2Context(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 251;
	        this.expr_infix2(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 258;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new LandContext(this, new Expr_infix1Context(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix1);
	                this.state = 253;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 254;
	                this.match(WdlV1_1Parser.AND);
	                this.state = 255;
	                this.expr_infix2(0); 
	            }
	            this.state = 260;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expr_infix2(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_infix2Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 38;
	    this.enterRecursionRule(localctx, 38, WdlV1_1Parser.RULE_expr_infix2, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Infix3Context(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 262;
	        this.expr_infix3(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 284;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 282;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new EqeqContext(this, new Expr_infix2Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix2);
	                    this.state = 264;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 265;
	                    this.match(WdlV1_1Parser.EQUALITY);
	                    this.state = 266;
	                    this.expr_infix3(0);
	                    break;

	                case 2:
	                    localctx = new NeqContext(this, new Expr_infix2Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix2);
	                    this.state = 267;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 268;
	                    this.match(WdlV1_1Parser.NOTEQUAL);
	                    this.state = 269;
	                    this.expr_infix3(0);
	                    break;

	                case 3:
	                    localctx = new LteContext(this, new Expr_infix2Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix2);
	                    this.state = 270;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 271;
	                    this.match(WdlV1_1Parser.LTE);
	                    this.state = 272;
	                    this.expr_infix3(0);
	                    break;

	                case 4:
	                    localctx = new GteContext(this, new Expr_infix2Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix2);
	                    this.state = 273;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 274;
	                    this.match(WdlV1_1Parser.GTE);
	                    this.state = 275;
	                    this.expr_infix3(0);
	                    break;

	                case 5:
	                    localctx = new LtContext(this, new Expr_infix2Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix2);
	                    this.state = 276;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 277;
	                    this.match(WdlV1_1Parser.LT);
	                    this.state = 278;
	                    this.expr_infix3(0);
	                    break;

	                case 6:
	                    localctx = new GtContext(this, new Expr_infix2Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix2);
	                    this.state = 279;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 280;
	                    this.match(WdlV1_1Parser.GT);
	                    this.state = 281;
	                    this.expr_infix3(0);
	                    break;

	                } 
	            }
	            this.state = 286;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expr_infix3(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_infix3Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 40;
	    this.enterRecursionRule(localctx, 40, WdlV1_1Parser.RULE_expr_infix3, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Infix4Context(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 288;
	        this.expr_infix4(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 298;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 296;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AddContext(this, new Expr_infix3Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix3);
	                    this.state = 290;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 291;
	                    this.match(WdlV1_1Parser.PLUS);
	                    this.state = 292;
	                    this.expr_infix4(0);
	                    break;

	                case 2:
	                    localctx = new SubContext(this, new Expr_infix3Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix3);
	                    this.state = 293;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 294;
	                    this.match(WdlV1_1Parser.MINUS);
	                    this.state = 295;
	                    this.expr_infix4(0);
	                    break;

	                } 
	            }
	            this.state = 300;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expr_infix4(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_infix4Context(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 42;
	    this.enterRecursionRule(localctx, 42, WdlV1_1Parser.RULE_expr_infix4, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Infix5Context(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 302;
	        this.expr_infix5();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 315;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 313;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MulContext(this, new Expr_infix4Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix4);
	                    this.state = 304;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 305;
	                    this.match(WdlV1_1Parser.STAR);
	                    this.state = 306;
	                    this.expr_infix5();
	                    break;

	                case 2:
	                    localctx = new DivideContext(this, new Expr_infix4Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix4);
	                    this.state = 307;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 308;
	                    this.match(WdlV1_1Parser.DIVIDE);
	                    this.state = 309;
	                    this.expr_infix5();
	                    break;

	                case 3:
	                    localctx = new ModContext(this, new Expr_infix4Context(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_infix4);
	                    this.state = 310;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 311;
	                    this.match(WdlV1_1Parser.MOD);
	                    this.state = 312;
	                    this.expr_infix5();
	                    break;

	                } 
	            }
	            this.state = 317;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expr_infix5() {
	    let localctx = new Expr_infix5Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, WdlV1_1Parser.RULE_expr_infix5);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 318;
	        this.expr_core(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member() {
	    let localctx = new MemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, WdlV1_1Parser.RULE_member);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.match(WdlV1_1Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr_core(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Expr_coreContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, WdlV1_1Parser.RULE_expr_core, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ApplyContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 323;
	            this.match(WdlV1_1Parser.Identifier);
	            this.state = 324;
	            this.match(WdlV1_1Parser.LPAREN);
	            this.state = 336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 9)) & ~0x1f) === 0 && ((1 << (_la - 9)) & 3188195329) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 371294209) !== 0)) {
	                this.state = 325;
	                this.expr();
	                this.state = 330;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 326;
	                        this.match(WdlV1_1Parser.COMMA);
	                        this.state = 327;
	                        this.expr(); 
	                    }
	                    this.state = 332;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	                }

	                this.state = 334;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===60) {
	                    this.state = 333;
	                    this.match(WdlV1_1Parser.COMMA);
	                }

	            }

	            this.state = 338;
	            this.match(WdlV1_1Parser.RPAREN);
	            break;

	        case 2:
	            localctx = new Array_literalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 339;
	            this.match(WdlV1_1Parser.LBRACK);
	            this.state = 353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 9)) & ~0x1f) === 0 && ((1 << (_la - 9)) & 3188195329) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 371294209) !== 0)) {
	                this.state = 340;
	                this.expr();
	                this.state = 345;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 341;
	                        this.match(WdlV1_1Parser.COMMA);
	                        this.state = 342;
	                        this.expr(); 
	                    }
	                    this.state = 347;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
	                }

	                this.state = 349;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===60) {
	                    this.state = 348;
	                    this.match(WdlV1_1Parser.COMMA);
	                }

	                this.state = 355;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 356;
	            this.match(WdlV1_1Parser.RBRACK);
	            break;

	        case 3:
	            localctx = new Pair_literalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 357;
	            this.match(WdlV1_1Parser.LPAREN);
	            this.state = 358;
	            this.expr();
	            this.state = 359;
	            this.match(WdlV1_1Parser.COMMA);
	            this.state = 360;
	            this.expr();
	            this.state = 361;
	            this.match(WdlV1_1Parser.RPAREN);
	            break;

	        case 4:
	            localctx = new Map_literalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 363;
	            this.match(WdlV1_1Parser.LBRACE);
	            this.state = 382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 9)) & ~0x1f) === 0 && ((1 << (_la - 9)) & 3188195329) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 371294209) !== 0)) {
	                this.state = 364;
	                this.expr();
	                this.state = 365;
	                this.match(WdlV1_1Parser.COLON);
	                this.state = 366;
	                this.expr();
	                this.state = 374;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 367;
	                        this.match(WdlV1_1Parser.COMMA);
	                        this.state = 368;
	                        this.expr();
	                        this.state = 369;
	                        this.match(WdlV1_1Parser.COLON);
	                        this.state = 370;
	                        this.expr(); 
	                    }
	                    this.state = 376;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	                }

	                this.state = 378;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===60) {
	                    this.state = 377;
	                    this.match(WdlV1_1Parser.COMMA);
	                }

	                this.state = 384;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 385;
	            this.match(WdlV1_1Parser.RBRACE);
	            break;

	        case 5:
	            localctx = new Object_literalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 386;
	            this.match(WdlV1_1Parser.OBJECTLITERAL);
	            this.state = 387;
	            this.match(WdlV1_1Parser.LBRACE);
	            this.state = 406;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===70) {
	                this.state = 388;
	                this.member();
	                this.state = 389;
	                this.match(WdlV1_1Parser.COLON);
	                this.state = 390;
	                this.expr();
	                this.state = 398;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 391;
	                        this.match(WdlV1_1Parser.COMMA);
	                        this.state = 392;
	                        this.member();
	                        this.state = 393;
	                        this.match(WdlV1_1Parser.COLON);
	                        this.state = 394;
	                        this.expr(); 
	                    }
	                    this.state = 400;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	                }

	                this.state = 402;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===60) {
	                    this.state = 401;
	                    this.match(WdlV1_1Parser.COMMA);
	                }

	                this.state = 408;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 409;
	            this.match(WdlV1_1Parser.RBRACE);
	            break;

	        case 6:
	            localctx = new Struct_literalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 410;
	            this.match(WdlV1_1Parser.Identifier);
	            this.state = 411;
	            this.match(WdlV1_1Parser.LBRACE);
	            this.state = 430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===70) {
	                this.state = 412;
	                this.member();
	                this.state = 413;
	                this.match(WdlV1_1Parser.COLON);
	                this.state = 414;
	                this.expr();
	                this.state = 422;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 415;
	                        this.match(WdlV1_1Parser.COMMA);
	                        this.state = 416;
	                        this.member();
	                        this.state = 417;
	                        this.match(WdlV1_1Parser.COLON);
	                        this.state = 418;
	                        this.expr(); 
	                    }
	                    this.state = 424;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	                }

	                this.state = 426;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===60) {
	                    this.state = 425;
	                    this.match(WdlV1_1Parser.COMMA);
	                }

	                this.state = 432;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 433;
	            this.match(WdlV1_1Parser.RBRACE);
	            break;

	        case 7:
	            localctx = new IfthenelseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 434;
	            this.match(WdlV1_1Parser.IF);
	            this.state = 435;
	            this.expr();
	            this.state = 436;
	            this.match(WdlV1_1Parser.THEN);
	            this.state = 437;
	            this.expr();
	            this.state = 438;
	            this.match(WdlV1_1Parser.ELSE);
	            this.state = 439;
	            this.expr();
	            break;

	        case 8:
	            localctx = new Expression_groupContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 441;
	            this.match(WdlV1_1Parser.LPAREN);
	            this.state = 442;
	            this.expr();
	            this.state = 443;
	            this.match(WdlV1_1Parser.RPAREN);
	            break;

	        case 9:
	            localctx = new NegateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 445;
	            this.match(WdlV1_1Parser.NOT);
	            this.state = 446;
	            this.expr();
	            break;

	        case 10:
	            localctx = new UnarysignedContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 447;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===58)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 448;
	            this.expr();
	            break;

	        case 11:
	            localctx = new PrimitivesContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 449;
	            this.primitive_literal();
	            break;

	        case 12:
	            localctx = new Left_nameContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 450;
	            this.match(WdlV1_1Parser.Identifier);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 463;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 461;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AtContext(this, new Expr_coreContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_core);
	                    this.state = 453;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 454;
	                    this.match(WdlV1_1Parser.LBRACK);
	                    this.state = 455;
	                    this.expr();
	                    this.state = 456;
	                    this.match(WdlV1_1Parser.RBRACK);
	                    break;

	                case 2:
	                    localctx = new Get_nameContext(this, new Expr_coreContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, WdlV1_1Parser.RULE_expr_core);
	                    this.state = 458;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 459;
	                    this.match(WdlV1_1Parser.DOT);
	                    this.state = 460;
	                    this.match(WdlV1_1Parser.Identifier);
	                    break;

	                } 
	            }
	            this.state = 465;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	import_alias() {
	    let localctx = new Import_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, WdlV1_1Parser.RULE_import_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466;
	        this.match(WdlV1_1Parser.ALIAS);
	        this.state = 467;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 468;
	        this.match(WdlV1_1Parser.AS);
	        this.state = 469;
	        this.match(WdlV1_1Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_as() {
	    let localctx = new Import_asContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, WdlV1_1Parser.RULE_import_as);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this.match(WdlV1_1Parser.AS);
	        this.state = 472;
	        this.match(WdlV1_1Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_doc() {
	    let localctx = new Import_docContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, WdlV1_1Parser.RULE_import_doc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 474;
	        this.match(WdlV1_1Parser.IMPORT);
	        this.state = 475;
	        this.string();
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13) {
	            this.state = 476;
	            this.import_as();
	        }

	        this.state = 482;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===12) {
	            this.state = 479;
	            this.import_alias();
	            this.state = 484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct() {
	    let localctx = new StructContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, WdlV1_1Parser.RULE_struct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.match(WdlV1_1Parser.STRUCT);
	        this.state = 486;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 487;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2414870528) !== 0) || _la===70) {
	            this.state = 488;
	            this.unbound_decls();
	            this.state = 493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 494;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_value() {
	    let localctx = new Meta_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, WdlV1_1Parser.RULE_meta_value);
	    try {
	        this.state = 503;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 91:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 496;
	            this.match(WdlV1_1Parser.MetaNull);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 497;
	            this.match(WdlV1_1Parser.MetaBool);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 498;
	            this.match(WdlV1_1Parser.MetaInt);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 499;
	            this.match(WdlV1_1Parser.MetaFloat);
	            break;
	        case 92:
	        case 93:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 500;
	            this.meta_string();
	            break;
	        case 94:
	        case 97:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 501;
	            this.meta_object();
	            break;
	        case 95:
	        case 96:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 502;
	            this.meta_array();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_string_part() {
	    let localctx = new Meta_string_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, WdlV1_1Parser.RULE_meta_string_part);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===99) {
	            this.state = 505;
	            this.match(WdlV1_1Parser.MetaStringPart);
	            this.state = 510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_string() {
	    let localctx = new Meta_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, WdlV1_1Parser.RULE_meta_string);
	    try {
	        this.state = 519;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 511;
	            this.match(WdlV1_1Parser.MetaDquote);
	            this.state = 512;
	            this.meta_string_part();
	            this.state = 513;
	            this.match(WdlV1_1Parser.MetaDquote);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 515;
	            this.match(WdlV1_1Parser.MetaSquote);
	            this.state = 516;
	            this.meta_string_part();
	            this.state = 517;
	            this.match(WdlV1_1Parser.MetaSquote);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_array() {
	    let localctx = new Meta_arrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, WdlV1_1Parser.RULE_meta_array);
	    var _la = 0;
	    try {
	        this.state = 533;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 521;
	            this.match(WdlV1_1Parser.MetaEmptyArray);
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 522;
	            this.match(WdlV1_1Parser.MetaLbrack);
	            this.state = 523;
	            this.meta_value();
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===102) {
	                this.state = 524;
	                this.match(WdlV1_1Parser.MetaArrayComma);
	                this.state = 525;
	                this.meta_value();
	                this.state = 530;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 531;
	            _la = this._input.LA(1);
	            if(!(_la===101 || _la===103)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_object() {
	    let localctx = new Meta_objectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, WdlV1_1Parser.RULE_meta_object);
	    var _la = 0;
	    try {
	        this.state = 547;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 535;
	            this.match(WdlV1_1Parser.MetaEmptyObject);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 536;
	            this.match(WdlV1_1Parser.MetaLbrace);
	            this.state = 537;
	            this.meta_object_kv();
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===108) {
	                this.state = 538;
	                this.match(WdlV1_1Parser.MetaObjectComma);
	                this.state = 539;
	                this.meta_object_kv();
	                this.state = 544;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 545;
	            _la = this._input.LA(1);
	            if(!(_la===107 || _la===109)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_object_kv() {
	    let localctx = new Meta_object_kvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, WdlV1_1Parser.RULE_meta_object_kv);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        this.match(WdlV1_1Parser.MetaObjectIdentifier);
	        this.state = 550;
	        this.match(WdlV1_1Parser.MetaObjectColon);
	        this.state = 551;
	        this.meta_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta_kv() {
	    let localctx = new Meta_kvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, WdlV1_1Parser.RULE_meta_kv);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this.match(WdlV1_1Parser.MetaIdentifier);
	        this.state = 554;
	        this.match(WdlV1_1Parser.MetaColon);
	        this.state = 555;
	        this.meta_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_meta() {
	    let localctx = new Parameter_metaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, WdlV1_1Parser.RULE_parameter_meta);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 557;
	        this.match(WdlV1_1Parser.PARAMETERMETA);
	        this.state = 558;
	        this.match(WdlV1_1Parser.BeginMeta);
	        this.state = 562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 559;
	            this.meta_kv();
	            this.state = 564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 565;
	        this.match(WdlV1_1Parser.EndMeta);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meta() {
	    let localctx = new MetaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, WdlV1_1Parser.RULE_meta);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.match(WdlV1_1Parser.META);
	        this.state = 568;
	        this.match(WdlV1_1Parser.BeginMeta);
	        this.state = 572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 569;
	            this.meta_kv();
	            this.state = 574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 575;
	        this.match(WdlV1_1Parser.EndMeta);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_runtime_kv() {
	    let localctx = new Task_runtime_kvContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, WdlV1_1Parser.RULE_task_runtime_kv);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 578;
	        this.match(WdlV1_1Parser.COLON);
	        this.state = 579;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_runtime() {
	    let localctx = new Task_runtimeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, WdlV1_1Parser.RULE_task_runtime);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 581;
	        this.match(WdlV1_1Parser.RUNTIME);
	        this.state = 582;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===70) {
	            this.state = 583;
	            this.task_runtime_kv();
	            this.state = 588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 589;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_input() {
	    let localctx = new Task_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, WdlV1_1Parser.RULE_task_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 591;
	        this.match(WdlV1_1Parser.INPUT);
	        this.state = 592;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2414870528) !== 0) || _la===70) {
	            this.state = 593;
	            this.any_decls();
	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 599;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_output() {
	    let localctx = new Task_outputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, WdlV1_1Parser.RULE_task_output);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 601;
	        this.match(WdlV1_1Parser.OUTPUT);
	        this.state = 602;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 606;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2414870528) !== 0) || _la===70) {
	            this.state = 603;
	            this.bound_decls();
	            this.state = 608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 609;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_command_string_part() {
	    let localctx = new Task_command_string_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, WdlV1_1Parser.RULE_task_command_string_part);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===79) {
	            this.state = 611;
	            this.match(WdlV1_1Parser.CommandStringPart);
	            this.state = 616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_command_expr_part() {
	    let localctx = new Task_command_expr_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, WdlV1_1Parser.RULE_task_command_expr_part);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.match(WdlV1_1Parser.StringCommandStart);
	        this.state = 621;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 618;
	                this.expression_placeholder_option(); 
	            }
	            this.state = 623;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	        }

	        this.state = 624;
	        this.expr();
	        this.state = 625;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_command_expr_with_string() {
	    let localctx = new Task_command_expr_with_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, WdlV1_1Parser.RULE_task_command_expr_with_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 627;
	        this.task_command_expr_part();
	        this.state = 628;
	        this.task_command_string_part();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_command() {
	    let localctx = new Task_commandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, WdlV1_1Parser.RULE_task_command);
	    var _la = 0;
	    try {
	        this.state = 652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 630;
	            this.match(WdlV1_1Parser.COMMAND);
	            this.state = 631;
	            this.match(WdlV1_1Parser.BeginLBrace);
	            this.state = 632;
	            this.task_command_string_part();
	            this.state = 636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===77) {
	                this.state = 633;
	                this.task_command_expr_with_string();
	                this.state = 638;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 639;
	            this.match(WdlV1_1Parser.EndCommand);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 641;
	            this.match(WdlV1_1Parser.COMMAND);
	            this.state = 642;
	            this.match(WdlV1_1Parser.BeginHereDoc);
	            this.state = 643;
	            this.task_command_string_part();
	            this.state = 647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===77) {
	                this.state = 644;
	                this.task_command_expr_with_string();
	                this.state = 649;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 650;
	            this.match(WdlV1_1Parser.EndCommand);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task_element() {
	    let localctx = new Task_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, WdlV1_1Parser.RULE_task_element);
	    try {
	        this.state = 661;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 654;
	            this.task_input();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 655;
	            this.task_output();
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 656;
	            this.task_command();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 657;
	            this.task_runtime();
	            break;
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 31:
	        case 70:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 658;
	            this.bound_decls();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 659;
	            this.parameter_meta();
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 660;
	            this.meta();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	task() {
	    let localctx = new TaskContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, WdlV1_1Parser.RULE_task);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        this.match(WdlV1_1Parser.TASK);
	        this.state = 664;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 665;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 667; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 666;
	            this.task_element();
	            this.state = 669; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 15)) & ~0x1f) === 0 && ((1 << (_la - 15)) & 335871) !== 0) || _la===70);
	        this.state = 671;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inner_workflow_element() {
	    let localctx = new Inner_workflow_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, WdlV1_1Parser.RULE_inner_workflow_element);
	    try {
	        this.state = 677;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 31:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 673;
	            this.bound_decls();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 674;
	            this.call();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 675;
	            this.scatter();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 676;
	            this.conditional();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_alias() {
	    let localctx = new Call_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, WdlV1_1Parser.RULE_call_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679;
	        this.match(WdlV1_1Parser.AS);
	        this.state = 680;
	        this.match(WdlV1_1Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_input() {
	    let localctx = new Call_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, WdlV1_1Parser.RULE_call_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 683;
	            this.match(WdlV1_1Parser.EQUAL);
	            this.state = 684;
	            this.expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_inputs() {
	    let localctx = new Call_inputsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, WdlV1_1Parser.RULE_call_inputs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 687;
	        this.match(WdlV1_1Parser.INPUT);
	        this.state = 688;
	        this.match(WdlV1_1Parser.COLON);
	        this.state = 702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===70) {
	            this.state = 689;
	            this.call_input();
	            this.state = 694;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 690;
	                    this.match(WdlV1_1Parser.COMMA);
	                    this.state = 691;
	                    this.call_input(); 
	                }
	                this.state = 696;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	            }

	            this.state = 698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===60) {
	                this.state = 697;
	                this.match(WdlV1_1Parser.COMMA);
	            }

	            this.state = 704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_body() {
	    let localctx = new Call_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, WdlV1_1Parser.RULE_call_body);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===15) {
	            this.state = 706;
	            this.call_inputs();
	        }

	        this.state = 709;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_after() {
	    let localctx = new Call_afterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, WdlV1_1Parser.RULE_call_after);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this.match(WdlV1_1Parser.AFTER);
	        this.state = 712;
	        this.match(WdlV1_1Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call_name() {
	    let localctx = new Call_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, WdlV1_1Parser.RULE_call_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 715;
	            this.match(WdlV1_1Parser.DOT);
	            this.state = 716;
	            this.match(WdlV1_1Parser.Identifier);
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	call() {
	    let localctx = new CallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, WdlV1_1Parser.RULE_call);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.match(WdlV1_1Parser.CALL);
	        this.state = 723;
	        this.call_name();
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13) {
	            this.state = 724;
	            this.call_alias();
	        }

	        this.state = 730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===32) {
	            this.state = 727;
	            this.call_after();
	            this.state = 732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40) {
	            this.state = 733;
	            this.call_body();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scatter() {
	    let localctx = new ScatterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, WdlV1_1Parser.RULE_scatter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.match(WdlV1_1Parser.SCATTER);
	        this.state = 737;
	        this.match(WdlV1_1Parser.LPAREN);
	        this.state = 738;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 739;
	        this.match(WdlV1_1Parser.In);
	        this.state = 740;
	        this.expr();
	        this.state = 741;
	        this.match(WdlV1_1Parser.RPAREN);
	        this.state = 742;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2414871424) !== 0) || _la===70) {
	            this.state = 743;
	            this.inner_workflow_element();
	            this.state = 748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 749;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional() {
	    let localctx = new ConditionalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, WdlV1_1Parser.RULE_conditional);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this.match(WdlV1_1Parser.IF);
	        this.state = 752;
	        this.match(WdlV1_1Parser.LPAREN);
	        this.state = 753;
	        this.expr();
	        this.state = 754;
	        this.match(WdlV1_1Parser.RPAREN);
	        this.state = 755;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2414871424) !== 0) || _la===70) {
	            this.state = 756;
	            this.inner_workflow_element();
	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 762;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	workflow_input() {
	    let localctx = new Workflow_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, WdlV1_1Parser.RULE_workflow_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        this.match(WdlV1_1Parser.INPUT);
	        this.state = 765;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2414870528) !== 0) || _la===70) {
	            this.state = 766;
	            this.any_decls();
	            this.state = 771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 772;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	workflow_output() {
	    let localctx = new Workflow_outputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, WdlV1_1Parser.RULE_workflow_output);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.match(WdlV1_1Parser.OUTPUT);
	        this.state = 775;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2414870528) !== 0) || _la===70) {
	            this.state = 776;
	            this.bound_decls();
	            this.state = 781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 782;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	workflow_element() {
	    let localctx = new Workflow_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, WdlV1_1Parser.RULE_workflow_element);
	    try {
	        this.state = 789;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            localctx = new InputContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 784;
	            this.workflow_input();
	            break;
	        case 16:
	            localctx = new OutputContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 785;
	            this.workflow_output();
	            break;
	        case 7:
	        case 8:
	        case 9:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 31:
	        case 70:
	            localctx = new Inner_elementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 786;
	            this.inner_workflow_element();
	            break;
	        case 17:
	            localctx = new Parameter_meta_elementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 787;
	            this.parameter_meta();
	            break;
	        case 18:
	            localctx = new Meta_elementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 788;
	            this.meta();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	workflow() {
	    let localctx = new WorkflowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, WdlV1_1Parser.RULE_workflow);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.match(WdlV1_1Parser.WORKFLOW);
	        this.state = 792;
	        this.match(WdlV1_1Parser.Identifier);
	        this.state = 793;
	        this.match(WdlV1_1Parser.LBRACE);
	        this.state = 797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2415362944) !== 0) || _la===70) {
	            this.state = 794;
	            this.workflow_element();
	            this.state = 799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 800;
	        this.match(WdlV1_1Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	document_element() {
	    let localctx = new Document_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, WdlV1_1Parser.RULE_document_element);
	    try {
	        this.state = 805;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 802;
	            this.import_doc();
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 803;
	            this.struct();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 804;
	            this.task();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	document() {
	    let localctx = new DocumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, WdlV1_1Parser.RULE_document);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 807;
	            this.match(WdlV1_1Parser.VERSION);
	        }

	        this.state = 813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 104) !== 0)) {
	            this.state = 810;
	            this.document_element();
	            this.state = 815;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4) {
	            this.state = 816;
	            this.workflow();
	            this.state = 820;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 104) !== 0)) {
	                this.state = 817;
	                this.document_element();
	                this.state = 822;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 825;
	        this.match(WdlV1_1Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

WdlV1_1Parser.EOF = antlr4.Token.EOF;
WdlV1_1Parser.LINE_COMMENT = 1;
WdlV1_1Parser.VERSION = 2;
WdlV1_1Parser.IMPORT = 3;
WdlV1_1Parser.WORKFLOW = 4;
WdlV1_1Parser.TASK = 5;
WdlV1_1Parser.STRUCT = 6;
WdlV1_1Parser.SCATTER = 7;
WdlV1_1Parser.CALL = 8;
WdlV1_1Parser.IF = 9;
WdlV1_1Parser.THEN = 10;
WdlV1_1Parser.ELSE = 11;
WdlV1_1Parser.ALIAS = 12;
WdlV1_1Parser.AS = 13;
WdlV1_1Parser.In = 14;
WdlV1_1Parser.INPUT = 15;
WdlV1_1Parser.OUTPUT = 16;
WdlV1_1Parser.PARAMETERMETA = 17;
WdlV1_1Parser.META = 18;
WdlV1_1Parser.RUNTIME = 19;
WdlV1_1Parser.BOOLEAN = 20;
WdlV1_1Parser.INT = 21;
WdlV1_1Parser.FLOAT = 22;
WdlV1_1Parser.STRING = 23;
WdlV1_1Parser.FILE = 24;
WdlV1_1Parser.ARRAY = 25;
WdlV1_1Parser.MAP = 26;
WdlV1_1Parser.OBJECT = 27;
WdlV1_1Parser.OBJECTLITERAL = 28;
WdlV1_1Parser.SEPEQUAL = 29;
WdlV1_1Parser.DEFAULTEQUAL = 30;
WdlV1_1Parser.PAIR = 31;
WdlV1_1Parser.AFTER = 32;
WdlV1_1Parser.COMMAND = 33;
WdlV1_1Parser.NONELITERAL = 34;
WdlV1_1Parser.IntLiteral = 35;
WdlV1_1Parser.FloatLiteral = 36;
WdlV1_1Parser.BoolLiteral = 37;
WdlV1_1Parser.LPAREN = 38;
WdlV1_1Parser.RPAREN = 39;
WdlV1_1Parser.LBRACE = 40;
WdlV1_1Parser.RBRACE = 41;
WdlV1_1Parser.LBRACK = 42;
WdlV1_1Parser.RBRACK = 43;
WdlV1_1Parser.ESC = 44;
WdlV1_1Parser.COLON = 45;
WdlV1_1Parser.LT = 46;
WdlV1_1Parser.GT = 47;
WdlV1_1Parser.GTE = 48;
WdlV1_1Parser.LTE = 49;
WdlV1_1Parser.EQUALITY = 50;
WdlV1_1Parser.NOTEQUAL = 51;
WdlV1_1Parser.EQUAL = 52;
WdlV1_1Parser.AND = 53;
WdlV1_1Parser.OR = 54;
WdlV1_1Parser.OPTIONAL = 55;
WdlV1_1Parser.STAR = 56;
WdlV1_1Parser.PLUS = 57;
WdlV1_1Parser.MINUS = 58;
WdlV1_1Parser.DOLLAR = 59;
WdlV1_1Parser.COMMA = 60;
WdlV1_1Parser.SEMI = 61;
WdlV1_1Parser.DOT = 62;
WdlV1_1Parser.NOT = 63;
WdlV1_1Parser.TILDE = 64;
WdlV1_1Parser.DIVIDE = 65;
WdlV1_1Parser.MOD = 66;
WdlV1_1Parser.SQUOTE = 67;
WdlV1_1Parser.DQUOTE = 68;
WdlV1_1Parser.WHITESPACE = 69;
WdlV1_1Parser.Identifier = 70;
WdlV1_1Parser.StringPart = 71;
WdlV1_1Parser.BeginWhitespace = 72;
WdlV1_1Parser.BeginHereDoc = 73;
WdlV1_1Parser.BeginLBrace = 74;
WdlV1_1Parser.HereDocUnicodeEscape = 75;
WdlV1_1Parser.CommandUnicodeEscape = 76;
WdlV1_1Parser.StringCommandStart = 77;
WdlV1_1Parser.EndCommand = 78;
WdlV1_1Parser.CommandStringPart = 79;
WdlV1_1Parser.BeginMeta = 80;
WdlV1_1Parser.MetaWhitespace = 81;
WdlV1_1Parser.MetaBodyComment = 82;
WdlV1_1Parser.MetaIdentifier = 83;
WdlV1_1Parser.MetaColon = 84;
WdlV1_1Parser.EndMeta = 85;
WdlV1_1Parser.MetaBodyWhitespace = 86;
WdlV1_1Parser.MetaValueComment = 87;
WdlV1_1Parser.MetaBool = 88;
WdlV1_1Parser.MetaInt = 89;
WdlV1_1Parser.MetaFloat = 90;
WdlV1_1Parser.MetaNull = 91;
WdlV1_1Parser.MetaSquote = 92;
WdlV1_1Parser.MetaDquote = 93;
WdlV1_1Parser.MetaEmptyObject = 94;
WdlV1_1Parser.MetaEmptyArray = 95;
WdlV1_1Parser.MetaLbrack = 96;
WdlV1_1Parser.MetaLbrace = 97;
WdlV1_1Parser.MetaValueWhitespace = 98;
WdlV1_1Parser.MetaStringPart = 99;
WdlV1_1Parser.MetaArrayComment = 100;
WdlV1_1Parser.MetaArrayCommaRbrack = 101;
WdlV1_1Parser.MetaArrayComma = 102;
WdlV1_1Parser.MetaRbrack = 103;
WdlV1_1Parser.MetaArrayWhitespace = 104;
WdlV1_1Parser.MetaObjectIdentifier = 105;
WdlV1_1Parser.MetaObjectColon = 106;
WdlV1_1Parser.MetaObjectCommaRbrace = 107;
WdlV1_1Parser.MetaObjectComma = 108;
WdlV1_1Parser.MetaRbrace = 109;
WdlV1_1Parser.MetaObjectWhitespace = 110;
WdlV1_1Parser.HereDocEscapedEnd = 111;

WdlV1_1Parser.RULE_map_type = 0;
WdlV1_1Parser.RULE_array_type = 1;
WdlV1_1Parser.RULE_pair_type = 2;
WdlV1_1Parser.RULE_type_base = 3;
WdlV1_1Parser.RULE_wdl_type = 4;
WdlV1_1Parser.RULE_unbound_decls = 5;
WdlV1_1Parser.RULE_bound_decls = 6;
WdlV1_1Parser.RULE_any_decls = 7;
WdlV1_1Parser.RULE_number = 8;
WdlV1_1Parser.RULE_expression_placeholder_option = 9;
WdlV1_1Parser.RULE_string_part = 10;
WdlV1_1Parser.RULE_string_expr_part = 11;
WdlV1_1Parser.RULE_string_expr_with_string_part = 12;
WdlV1_1Parser.RULE_string = 13;
WdlV1_1Parser.RULE_primitive_literal = 14;
WdlV1_1Parser.RULE_expr = 15;
WdlV1_1Parser.RULE_expr_infix = 16;
WdlV1_1Parser.RULE_expr_infix0 = 17;
WdlV1_1Parser.RULE_expr_infix1 = 18;
WdlV1_1Parser.RULE_expr_infix2 = 19;
WdlV1_1Parser.RULE_expr_infix3 = 20;
WdlV1_1Parser.RULE_expr_infix4 = 21;
WdlV1_1Parser.RULE_expr_infix5 = 22;
WdlV1_1Parser.RULE_member = 23;
WdlV1_1Parser.RULE_expr_core = 24;
WdlV1_1Parser.RULE_import_alias = 25;
WdlV1_1Parser.RULE_import_as = 26;
WdlV1_1Parser.RULE_import_doc = 27;
WdlV1_1Parser.RULE_struct = 28;
WdlV1_1Parser.RULE_meta_value = 29;
WdlV1_1Parser.RULE_meta_string_part = 30;
WdlV1_1Parser.RULE_meta_string = 31;
WdlV1_1Parser.RULE_meta_array = 32;
WdlV1_1Parser.RULE_meta_object = 33;
WdlV1_1Parser.RULE_meta_object_kv = 34;
WdlV1_1Parser.RULE_meta_kv = 35;
WdlV1_1Parser.RULE_parameter_meta = 36;
WdlV1_1Parser.RULE_meta = 37;
WdlV1_1Parser.RULE_task_runtime_kv = 38;
WdlV1_1Parser.RULE_task_runtime = 39;
WdlV1_1Parser.RULE_task_input = 40;
WdlV1_1Parser.RULE_task_output = 41;
WdlV1_1Parser.RULE_task_command_string_part = 42;
WdlV1_1Parser.RULE_task_command_expr_part = 43;
WdlV1_1Parser.RULE_task_command_expr_with_string = 44;
WdlV1_1Parser.RULE_task_command = 45;
WdlV1_1Parser.RULE_task_element = 46;
WdlV1_1Parser.RULE_task = 47;
WdlV1_1Parser.RULE_inner_workflow_element = 48;
WdlV1_1Parser.RULE_call_alias = 49;
WdlV1_1Parser.RULE_call_input = 50;
WdlV1_1Parser.RULE_call_inputs = 51;
WdlV1_1Parser.RULE_call_body = 52;
WdlV1_1Parser.RULE_call_after = 53;
WdlV1_1Parser.RULE_call_name = 54;
WdlV1_1Parser.RULE_call = 55;
WdlV1_1Parser.RULE_scatter = 56;
WdlV1_1Parser.RULE_conditional = 57;
WdlV1_1Parser.RULE_workflow_input = 58;
WdlV1_1Parser.RULE_workflow_output = 59;
WdlV1_1Parser.RULE_workflow_element = 60;
WdlV1_1Parser.RULE_workflow = 61;
WdlV1_1Parser.RULE_document_element = 62;
WdlV1_1Parser.RULE_document = 63;

class Map_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_map_type;
    }

	MAP() {
	    return this.getToken(WdlV1_1Parser.MAP, 0);
	};

	LBRACK() {
	    return this.getToken(WdlV1_1Parser.LBRACK, 0);
	};

	wdl_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Wdl_typeContext);
	    } else {
	        return this.getTypedRuleContext(Wdl_typeContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(WdlV1_1Parser.COMMA, 0);
	};

	RBRACK() {
	    return this.getToken(WdlV1_1Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMap_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMap_type(this);
		}
	}


}



class Array_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_array_type;
    }

	ARRAY() {
	    return this.getToken(WdlV1_1Parser.ARRAY, 0);
	};

	LBRACK() {
	    return this.getToken(WdlV1_1Parser.LBRACK, 0);
	};

	wdl_type() {
	    return this.getTypedRuleContext(Wdl_typeContext,0);
	};

	RBRACK() {
	    return this.getToken(WdlV1_1Parser.RBRACK, 0);
	};

	PLUS() {
	    return this.getToken(WdlV1_1Parser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterArray_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitArray_type(this);
		}
	}


}



class Pair_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_pair_type;
    }

	PAIR() {
	    return this.getToken(WdlV1_1Parser.PAIR, 0);
	};

	LBRACK() {
	    return this.getToken(WdlV1_1Parser.LBRACK, 0);
	};

	wdl_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Wdl_typeContext);
	    } else {
	        return this.getTypedRuleContext(Wdl_typeContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(WdlV1_1Parser.COMMA, 0);
	};

	RBRACK() {
	    return this.getToken(WdlV1_1Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterPair_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitPair_type(this);
		}
	}


}



class Type_baseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_type_base;
    }

	array_type() {
	    return this.getTypedRuleContext(Array_typeContext,0);
	};

	map_type() {
	    return this.getTypedRuleContext(Map_typeContext,0);
	};

	pair_type() {
	    return this.getTypedRuleContext(Pair_typeContext,0);
	};

	STRING() {
	    return this.getToken(WdlV1_1Parser.STRING, 0);
	};

	FILE() {
	    return this.getToken(WdlV1_1Parser.FILE, 0);
	};

	BOOLEAN() {
	    return this.getToken(WdlV1_1Parser.BOOLEAN, 0);
	};

	INT() {
	    return this.getToken(WdlV1_1Parser.INT, 0);
	};

	FLOAT() {
	    return this.getToken(WdlV1_1Parser.FLOAT, 0);
	};

	OBJECT() {
	    return this.getToken(WdlV1_1Parser.OBJECT, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterType_base(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitType_base(this);
		}
	}


}



class Wdl_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_wdl_type;
    }

	type_base() {
	    return this.getTypedRuleContext(Type_baseContext,0);
	};

	OPTIONAL() {
	    return this.getToken(WdlV1_1Parser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterWdl_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitWdl_type(this);
		}
	}


}



class Unbound_declsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_unbound_decls;
    }

	wdl_type() {
	    return this.getTypedRuleContext(Wdl_typeContext,0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterUnbound_decls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitUnbound_decls(this);
		}
	}


}



class Bound_declsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_bound_decls;
    }

	wdl_type() {
	    return this.getTypedRuleContext(Wdl_typeContext,0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	EQUAL() {
	    return this.getToken(WdlV1_1Parser.EQUAL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterBound_decls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitBound_decls(this);
		}
	}


}



class Any_declsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_any_decls;
    }

	unbound_decls() {
	    return this.getTypedRuleContext(Unbound_declsContext,0);
	};

	bound_decls() {
	    return this.getTypedRuleContext(Bound_declsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterAny_decls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitAny_decls(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_number;
    }

	IntLiteral() {
	    return this.getToken(WdlV1_1Parser.IntLiteral, 0);
	};

	FloatLiteral() {
	    return this.getToken(WdlV1_1Parser.FloatLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitNumber(this);
		}
	}


}



class Expression_placeholder_optionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expression_placeholder_option;
    }

	BoolLiteral() {
	    return this.getToken(WdlV1_1Parser.BoolLiteral, 0);
	};

	EQUAL() {
	    return this.getToken(WdlV1_1Parser.EQUAL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DEFAULTEQUAL() {
	    return this.getToken(WdlV1_1Parser.DEFAULTEQUAL, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	SEPEQUAL() {
	    return this.getToken(WdlV1_1Parser.SEPEQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterExpression_placeholder_option(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitExpression_placeholder_option(this);
		}
	}


}



class String_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_string_part;
    }

	StringPart = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.StringPart);
	    } else {
	        return this.getToken(WdlV1_1Parser.StringPart, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterString_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitString_part(this);
		}
	}


}



class String_expr_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_string_expr_part;
    }

	StringCommandStart() {
	    return this.getToken(WdlV1_1Parser.StringCommandStart, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	expression_placeholder_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression_placeholder_optionContext);
	    } else {
	        return this.getTypedRuleContext(Expression_placeholder_optionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterString_expr_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitString_expr_part(this);
		}
	}


}



class String_expr_with_string_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_string_expr_with_string_part;
    }

	string_expr_part() {
	    return this.getTypedRuleContext(String_expr_partContext,0);
	};

	string_part() {
	    return this.getTypedRuleContext(String_partContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterString_expr_with_string_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitString_expr_with_string_part(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_string;
    }

	DQUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.DQUOTE);
	    } else {
	        return this.getToken(WdlV1_1Parser.DQUOTE, i);
	    }
	};


	string_part() {
	    return this.getTypedRuleContext(String_partContext,0);
	};

	string_expr_with_string_part = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(String_expr_with_string_partContext);
	    } else {
	        return this.getTypedRuleContext(String_expr_with_string_partContext,i);
	    }
	};

	SQUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.SQUOTE);
	    } else {
	        return this.getToken(WdlV1_1Parser.SQUOTE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitString(this);
		}
	}


}



class Primitive_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_primitive_literal;
    }

	BoolLiteral() {
	    return this.getToken(WdlV1_1Parser.BoolLiteral, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	NONELITERAL() {
	    return this.getToken(WdlV1_1Parser.NONELITERAL, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterPrimitive_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitPrimitive_literal(this);
		}
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr;
    }

	expr_infix() {
	    return this.getTypedRuleContext(Expr_infixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitExpr(this);
		}
	}


}



class Expr_infixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_infix;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Infix0Context extends Expr_infixContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix0() {
	    return this.getTypedRuleContext(Expr_infix0Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInfix0(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInfix0(this);
		}
	}


}

WdlV1_1Parser.Infix0Context = Infix0Context;

class Expr_infix0Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_infix0;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Infix1Context extends Expr_infix0Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix1() {
	    return this.getTypedRuleContext(Expr_infix1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInfix1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInfix1(this);
		}
	}


}

WdlV1_1Parser.Infix1Context = Infix1Context;

class LorContext extends Expr_infix0Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix0() {
	    return this.getTypedRuleContext(Expr_infix0Context,0);
	};

	OR() {
	    return this.getToken(WdlV1_1Parser.OR, 0);
	};

	expr_infix1() {
	    return this.getTypedRuleContext(Expr_infix1Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterLor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitLor(this);
		}
	}


}

WdlV1_1Parser.LorContext = LorContext;

class Expr_infix1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_infix1;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Infix2Context extends Expr_infix1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInfix2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInfix2(this);
		}
	}


}

WdlV1_1Parser.Infix2Context = Infix2Context;

class LandContext extends Expr_infix1Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix1() {
	    return this.getTypedRuleContext(Expr_infix1Context,0);
	};

	AND() {
	    return this.getToken(WdlV1_1Parser.AND, 0);
	};

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterLand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitLand(this);
		}
	}


}

WdlV1_1Parser.LandContext = LandContext;

class Expr_infix2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_infix2;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class EqeqContext extends Expr_infix2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	EQUALITY() {
	    return this.getToken(WdlV1_1Parser.EQUALITY, 0);
	};

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterEqeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitEqeq(this);
		}
	}


}

WdlV1_1Parser.EqeqContext = EqeqContext;

class LtContext extends Expr_infix2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	LT() {
	    return this.getToken(WdlV1_1Parser.LT, 0);
	};

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterLt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitLt(this);
		}
	}


}

WdlV1_1Parser.LtContext = LtContext;

class Infix3Context extends Expr_infix2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInfix3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInfix3(this);
		}
	}


}

WdlV1_1Parser.Infix3Context = Infix3Context;

class GteContext extends Expr_infix2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	GTE() {
	    return this.getToken(WdlV1_1Parser.GTE, 0);
	};

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterGte(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitGte(this);
		}
	}


}

WdlV1_1Parser.GteContext = GteContext;

class NeqContext extends Expr_infix2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	NOTEQUAL() {
	    return this.getToken(WdlV1_1Parser.NOTEQUAL, 0);
	};

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterNeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitNeq(this);
		}
	}


}

WdlV1_1Parser.NeqContext = NeqContext;

class LteContext extends Expr_infix2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	LTE() {
	    return this.getToken(WdlV1_1Parser.LTE, 0);
	};

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterLte(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitLte(this);
		}
	}


}

WdlV1_1Parser.LteContext = LteContext;

class GtContext extends Expr_infix2Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix2() {
	    return this.getTypedRuleContext(Expr_infix2Context,0);
	};

	GT() {
	    return this.getToken(WdlV1_1Parser.GT, 0);
	};

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterGt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitGt(this);
		}
	}


}

WdlV1_1Parser.GtContext = GtContext;

class Expr_infix3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_infix3;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AddContext extends Expr_infix3Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	PLUS() {
	    return this.getToken(WdlV1_1Parser.PLUS, 0);
	};

	expr_infix4() {
	    return this.getTypedRuleContext(Expr_infix4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterAdd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitAdd(this);
		}
	}


}

WdlV1_1Parser.AddContext = AddContext;

class SubContext extends Expr_infix3Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix3() {
	    return this.getTypedRuleContext(Expr_infix3Context,0);
	};

	MINUS() {
	    return this.getToken(WdlV1_1Parser.MINUS, 0);
	};

	expr_infix4() {
	    return this.getTypedRuleContext(Expr_infix4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterSub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitSub(this);
		}
	}


}

WdlV1_1Parser.SubContext = SubContext;

class Infix4Context extends Expr_infix3Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix4() {
	    return this.getTypedRuleContext(Expr_infix4Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInfix4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInfix4(this);
		}
	}


}

WdlV1_1Parser.Infix4Context = Infix4Context;

class Expr_infix4Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_infix4;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ModContext extends Expr_infix4Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix4() {
	    return this.getTypedRuleContext(Expr_infix4Context,0);
	};

	MOD() {
	    return this.getToken(WdlV1_1Parser.MOD, 0);
	};

	expr_infix5() {
	    return this.getTypedRuleContext(Expr_infix5Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMod(this);
		}
	}


}

WdlV1_1Parser.ModContext = ModContext;

class MulContext extends Expr_infix4Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix4() {
	    return this.getTypedRuleContext(Expr_infix4Context,0);
	};

	STAR() {
	    return this.getToken(WdlV1_1Parser.STAR, 0);
	};

	expr_infix5() {
	    return this.getTypedRuleContext(Expr_infix5Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMul(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMul(this);
		}
	}


}

WdlV1_1Parser.MulContext = MulContext;

class DivideContext extends Expr_infix4Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix4() {
	    return this.getTypedRuleContext(Expr_infix4Context,0);
	};

	DIVIDE() {
	    return this.getToken(WdlV1_1Parser.DIVIDE, 0);
	};

	expr_infix5() {
	    return this.getTypedRuleContext(Expr_infix5Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterDivide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitDivide(this);
		}
	}


}

WdlV1_1Parser.DivideContext = DivideContext;

class Infix5Context extends Expr_infix4Context {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_infix5() {
	    return this.getTypedRuleContext(Expr_infix5Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInfix5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInfix5(this);
		}
	}


}

WdlV1_1Parser.Infix5Context = Infix5Context;

class Expr_infix5Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_infix5;
    }

	expr_core() {
	    return this.getTypedRuleContext(Expr_coreContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterExpr_infix5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitExpr_infix5(this);
		}
	}


}



class MemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_member;
    }

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMember(this);
		}
	}


}



class Expr_coreContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_expr_core;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Pair_literalContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(WdlV1_1Parser.LPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(WdlV1_1Parser.COMMA, 0);
	};

	RPAREN() {
	    return this.getToken(WdlV1_1Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterPair_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitPair_literal(this);
		}
	}


}

WdlV1_1Parser.Pair_literalContext = Pair_literalContext;

class UnarysignedContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	PLUS() {
	    return this.getToken(WdlV1_1Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(WdlV1_1Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterUnarysigned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitUnarysigned(this);
		}
	}


}

WdlV1_1Parser.UnarysignedContext = UnarysignedContext;

class ApplyContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(WdlV1_1Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(WdlV1_1Parser.RPAREN, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COMMA);
	    } else {
	        return this.getToken(WdlV1_1Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterApply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitApply(this);
		}
	}


}

WdlV1_1Parser.ApplyContext = ApplyContext;

class Expression_groupContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(WdlV1_1Parser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(WdlV1_1Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterExpression_group(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitExpression_group(this);
		}
	}


}

WdlV1_1Parser.Expression_groupContext = Expression_groupContext;

class PrimitivesContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primitive_literal() {
	    return this.getTypedRuleContext(Primitive_literalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterPrimitives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitPrimitives(this);
		}
	}


}

WdlV1_1Parser.PrimitivesContext = PrimitivesContext;

class Left_nameContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterLeft_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitLeft_name(this);
		}
	}


}

WdlV1_1Parser.Left_nameContext = Left_nameContext;

class AtContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_core() {
	    return this.getTypedRuleContext(Expr_coreContext,0);
	};

	LBRACK() {
	    return this.getToken(WdlV1_1Parser.LBRACK, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACK() {
	    return this.getToken(WdlV1_1Parser.RBRACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterAt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitAt(this);
		}
	}


}

WdlV1_1Parser.AtContext = AtContext;

class NegateContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(WdlV1_1Parser.NOT, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterNegate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitNegate(this);
		}
	}


}

WdlV1_1Parser.NegateContext = NegateContext;

class Map_literalContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COLON);
	    } else {
	        return this.getToken(WdlV1_1Parser.COLON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COMMA);
	    } else {
	        return this.getToken(WdlV1_1Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMap_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMap_literal(this);
		}
	}


}

WdlV1_1Parser.Map_literalContext = Map_literalContext;

class IfthenelseContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(WdlV1_1Parser.IF, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	THEN() {
	    return this.getToken(WdlV1_1Parser.THEN, 0);
	};

	ELSE() {
	    return this.getToken(WdlV1_1Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterIfthenelse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitIfthenelse(this);
		}
	}


}

WdlV1_1Parser.IfthenelseContext = IfthenelseContext;

class Get_nameContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr_core() {
	    return this.getTypedRuleContext(Expr_coreContext,0);
	};

	DOT() {
	    return this.getToken(WdlV1_1Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterGet_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitGet_name(this);
		}
	}


}

WdlV1_1Parser.Get_nameContext = Get_nameContext;

class Object_literalContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OBJECTLITERAL() {
	    return this.getToken(WdlV1_1Parser.OBJECTLITERAL, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberContext);
	    } else {
	        return this.getTypedRuleContext(MemberContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COLON);
	    } else {
	        return this.getToken(WdlV1_1Parser.COLON, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COMMA);
	    } else {
	        return this.getToken(WdlV1_1Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterObject_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitObject_literal(this);
		}
	}


}

WdlV1_1Parser.Object_literalContext = Object_literalContext;

class Array_literalContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LBRACK() {
	    return this.getToken(WdlV1_1Parser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(WdlV1_1Parser.RBRACK, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COMMA);
	    } else {
	        return this.getToken(WdlV1_1Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterArray_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitArray_literal(this);
		}
	}


}

WdlV1_1Parser.Array_literalContext = Array_literalContext;

class Struct_literalContext extends Expr_coreContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	member = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberContext);
	    } else {
	        return this.getTypedRuleContext(MemberContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COLON);
	    } else {
	        return this.getToken(WdlV1_1Parser.COLON, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COMMA);
	    } else {
	        return this.getToken(WdlV1_1Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterStruct_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitStruct_literal(this);
		}
	}


}

WdlV1_1Parser.Struct_literalContext = Struct_literalContext;

class Import_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_import_alias;
    }

	ALIAS() {
	    return this.getToken(WdlV1_1Parser.ALIAS, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.Identifier);
	    } else {
	        return this.getToken(WdlV1_1Parser.Identifier, i);
	    }
	};


	AS() {
	    return this.getToken(WdlV1_1Parser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterImport_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitImport_alias(this);
		}
	}


}



class Import_asContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_import_as;
    }

	AS() {
	    return this.getToken(WdlV1_1Parser.AS, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterImport_as(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitImport_as(this);
		}
	}


}



class Import_docContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_import_doc;
    }

	IMPORT() {
	    return this.getToken(WdlV1_1Parser.IMPORT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	import_as() {
	    return this.getTypedRuleContext(Import_asContext,0);
	};

	import_alias = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Import_aliasContext);
	    } else {
	        return this.getTypedRuleContext(Import_aliasContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterImport_doc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitImport_doc(this);
		}
	}


}



class StructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_struct;
    }

	STRUCT() {
	    return this.getToken(WdlV1_1Parser.STRUCT, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	unbound_decls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Unbound_declsContext);
	    } else {
	        return this.getTypedRuleContext(Unbound_declsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitStruct(this);
		}
	}


}



class Meta_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta_value;
    }

	MetaNull() {
	    return this.getToken(WdlV1_1Parser.MetaNull, 0);
	};

	MetaBool() {
	    return this.getToken(WdlV1_1Parser.MetaBool, 0);
	};

	MetaInt() {
	    return this.getToken(WdlV1_1Parser.MetaInt, 0);
	};

	MetaFloat() {
	    return this.getToken(WdlV1_1Parser.MetaFloat, 0);
	};

	meta_string() {
	    return this.getTypedRuleContext(Meta_stringContext,0);
	};

	meta_object() {
	    return this.getTypedRuleContext(Meta_objectContext,0);
	};

	meta_array() {
	    return this.getTypedRuleContext(Meta_arrayContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_value(this);
		}
	}


}



class Meta_string_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta_string_part;
    }

	MetaStringPart = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.MetaStringPart);
	    } else {
	        return this.getToken(WdlV1_1Parser.MetaStringPart, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_string_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_string_part(this);
		}
	}


}



class Meta_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta_string;
    }

	MetaDquote = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.MetaDquote);
	    } else {
	        return this.getToken(WdlV1_1Parser.MetaDquote, i);
	    }
	};


	meta_string_part() {
	    return this.getTypedRuleContext(Meta_string_partContext,0);
	};

	MetaSquote = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.MetaSquote);
	    } else {
	        return this.getToken(WdlV1_1Parser.MetaSquote, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_string(this);
		}
	}


}



class Meta_arrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta_array;
    }

	MetaEmptyArray() {
	    return this.getToken(WdlV1_1Parser.MetaEmptyArray, 0);
	};

	MetaLbrack() {
	    return this.getToken(WdlV1_1Parser.MetaLbrack, 0);
	};

	meta_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Meta_valueContext);
	    } else {
	        return this.getTypedRuleContext(Meta_valueContext,i);
	    }
	};

	MetaArrayCommaRbrack() {
	    return this.getToken(WdlV1_1Parser.MetaArrayCommaRbrack, 0);
	};

	MetaRbrack() {
	    return this.getToken(WdlV1_1Parser.MetaRbrack, 0);
	};

	MetaArrayComma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.MetaArrayComma);
	    } else {
	        return this.getToken(WdlV1_1Parser.MetaArrayComma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_array(this);
		}
	}


}



class Meta_objectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta_object;
    }

	MetaEmptyObject() {
	    return this.getToken(WdlV1_1Parser.MetaEmptyObject, 0);
	};

	MetaLbrace() {
	    return this.getToken(WdlV1_1Parser.MetaLbrace, 0);
	};

	meta_object_kv = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Meta_object_kvContext);
	    } else {
	        return this.getTypedRuleContext(Meta_object_kvContext,i);
	    }
	};

	MetaObjectCommaRbrace() {
	    return this.getToken(WdlV1_1Parser.MetaObjectCommaRbrace, 0);
	};

	MetaRbrace() {
	    return this.getToken(WdlV1_1Parser.MetaRbrace, 0);
	};

	MetaObjectComma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.MetaObjectComma);
	    } else {
	        return this.getToken(WdlV1_1Parser.MetaObjectComma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_object(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_object(this);
		}
	}


}



class Meta_object_kvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta_object_kv;
    }

	MetaObjectIdentifier() {
	    return this.getToken(WdlV1_1Parser.MetaObjectIdentifier, 0);
	};

	MetaObjectColon() {
	    return this.getToken(WdlV1_1Parser.MetaObjectColon, 0);
	};

	meta_value() {
	    return this.getTypedRuleContext(Meta_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_object_kv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_object_kv(this);
		}
	}


}



class Meta_kvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta_kv;
    }

	MetaIdentifier() {
	    return this.getToken(WdlV1_1Parser.MetaIdentifier, 0);
	};

	MetaColon() {
	    return this.getToken(WdlV1_1Parser.MetaColon, 0);
	};

	meta_value() {
	    return this.getTypedRuleContext(Meta_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_kv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_kv(this);
		}
	}


}



class Parameter_metaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_parameter_meta;
    }

	PARAMETERMETA() {
	    return this.getToken(WdlV1_1Parser.PARAMETERMETA, 0);
	};

	BeginMeta() {
	    return this.getToken(WdlV1_1Parser.BeginMeta, 0);
	};

	EndMeta() {
	    return this.getToken(WdlV1_1Parser.EndMeta, 0);
	};

	meta_kv = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Meta_kvContext);
	    } else {
	        return this.getTypedRuleContext(Meta_kvContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterParameter_meta(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitParameter_meta(this);
		}
	}


}



class MetaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_meta;
    }

	META() {
	    return this.getToken(WdlV1_1Parser.META, 0);
	};

	BeginMeta() {
	    return this.getToken(WdlV1_1Parser.BeginMeta, 0);
	};

	EndMeta() {
	    return this.getToken(WdlV1_1Parser.EndMeta, 0);
	};

	meta_kv = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Meta_kvContext);
	    } else {
	        return this.getTypedRuleContext(Meta_kvContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta(this);
		}
	}


}



class Task_runtime_kvContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_runtime_kv;
    }

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	COLON() {
	    return this.getToken(WdlV1_1Parser.COLON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_runtime_kv(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_runtime_kv(this);
		}
	}


}



class Task_runtimeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_runtime;
    }

	RUNTIME() {
	    return this.getToken(WdlV1_1Parser.RUNTIME, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	task_runtime_kv = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Task_runtime_kvContext);
	    } else {
	        return this.getTypedRuleContext(Task_runtime_kvContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_runtime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_runtime(this);
		}
	}


}



class Task_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_input;
    }

	INPUT() {
	    return this.getToken(WdlV1_1Parser.INPUT, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	any_decls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_declsContext);
	    } else {
	        return this.getTypedRuleContext(Any_declsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_input(this);
		}
	}


}



class Task_outputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_output;
    }

	OUTPUT() {
	    return this.getToken(WdlV1_1Parser.OUTPUT, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	bound_decls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bound_declsContext);
	    } else {
	        return this.getTypedRuleContext(Bound_declsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_output(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_output(this);
		}
	}


}



class Task_command_string_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_command_string_part;
    }

	CommandStringPart = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.CommandStringPart);
	    } else {
	        return this.getToken(WdlV1_1Parser.CommandStringPart, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_command_string_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_command_string_part(this);
		}
	}


}



class Task_command_expr_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_command_expr_part;
    }

	StringCommandStart() {
	    return this.getToken(WdlV1_1Parser.StringCommandStart, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	expression_placeholder_option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Expression_placeholder_optionContext);
	    } else {
	        return this.getTypedRuleContext(Expression_placeholder_optionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_command_expr_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_command_expr_part(this);
		}
	}


}



class Task_command_expr_with_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_command_expr_with_string;
    }

	task_command_expr_part() {
	    return this.getTypedRuleContext(Task_command_expr_partContext,0);
	};

	task_command_string_part() {
	    return this.getTypedRuleContext(Task_command_string_partContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_command_expr_with_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_command_expr_with_string(this);
		}
	}


}



class Task_commandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_command;
    }

	COMMAND() {
	    return this.getToken(WdlV1_1Parser.COMMAND, 0);
	};

	BeginLBrace() {
	    return this.getToken(WdlV1_1Parser.BeginLBrace, 0);
	};

	task_command_string_part() {
	    return this.getTypedRuleContext(Task_command_string_partContext,0);
	};

	EndCommand() {
	    return this.getToken(WdlV1_1Parser.EndCommand, 0);
	};

	task_command_expr_with_string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Task_command_expr_with_stringContext);
	    } else {
	        return this.getTypedRuleContext(Task_command_expr_with_stringContext,i);
	    }
	};

	BeginHereDoc() {
	    return this.getToken(WdlV1_1Parser.BeginHereDoc, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_command(this);
		}
	}


}



class Task_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task_element;
    }

	task_input() {
	    return this.getTypedRuleContext(Task_inputContext,0);
	};

	task_output() {
	    return this.getTypedRuleContext(Task_outputContext,0);
	};

	task_command() {
	    return this.getTypedRuleContext(Task_commandContext,0);
	};

	task_runtime() {
	    return this.getTypedRuleContext(Task_runtimeContext,0);
	};

	bound_decls() {
	    return this.getTypedRuleContext(Bound_declsContext,0);
	};

	parameter_meta() {
	    return this.getTypedRuleContext(Parameter_metaContext,0);
	};

	meta() {
	    return this.getTypedRuleContext(MetaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask_element(this);
		}
	}


}



class TaskContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_task;
    }

	TASK() {
	    return this.getToken(WdlV1_1Parser.TASK, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	task_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Task_elementContext);
	    } else {
	        return this.getTypedRuleContext(Task_elementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterTask(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitTask(this);
		}
	}


}



class Inner_workflow_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_inner_workflow_element;
    }

	bound_decls() {
	    return this.getTypedRuleContext(Bound_declsContext,0);
	};

	call() {
	    return this.getTypedRuleContext(CallContext,0);
	};

	scatter() {
	    return this.getTypedRuleContext(ScatterContext,0);
	};

	conditional() {
	    return this.getTypedRuleContext(ConditionalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInner_workflow_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInner_workflow_element(this);
		}
	}


}



class Call_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_call_alias;
    }

	AS() {
	    return this.getToken(WdlV1_1Parser.AS, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterCall_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitCall_alias(this);
		}
	}


}



class Call_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_call_input;
    }

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	EQUAL() {
	    return this.getToken(WdlV1_1Parser.EQUAL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterCall_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitCall_input(this);
		}
	}


}



class Call_inputsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_call_inputs;
    }

	INPUT() {
	    return this.getToken(WdlV1_1Parser.INPUT, 0);
	};

	COLON() {
	    return this.getToken(WdlV1_1Parser.COLON, 0);
	};

	call_input = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Call_inputContext);
	    } else {
	        return this.getTypedRuleContext(Call_inputContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.COMMA);
	    } else {
	        return this.getToken(WdlV1_1Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterCall_inputs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitCall_inputs(this);
		}
	}


}



class Call_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_call_body;
    }

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	call_inputs() {
	    return this.getTypedRuleContext(Call_inputsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterCall_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitCall_body(this);
		}
	}


}



class Call_afterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_call_after;
    }

	AFTER() {
	    return this.getToken(WdlV1_1Parser.AFTER, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterCall_after(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitCall_after(this);
		}
	}


}



class Call_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_call_name;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.Identifier);
	    } else {
	        return this.getToken(WdlV1_1Parser.Identifier, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(WdlV1_1Parser.DOT);
	    } else {
	        return this.getToken(WdlV1_1Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterCall_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitCall_name(this);
		}
	}


}



class CallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_call;
    }

	CALL() {
	    return this.getToken(WdlV1_1Parser.CALL, 0);
	};

	call_name() {
	    return this.getTypedRuleContext(Call_nameContext,0);
	};

	call_alias() {
	    return this.getTypedRuleContext(Call_aliasContext,0);
	};

	call_after = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Call_afterContext);
	    } else {
	        return this.getTypedRuleContext(Call_afterContext,i);
	    }
	};

	call_body() {
	    return this.getTypedRuleContext(Call_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitCall(this);
		}
	}


}



class ScatterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_scatter;
    }

	SCATTER() {
	    return this.getToken(WdlV1_1Parser.SCATTER, 0);
	};

	LPAREN() {
	    return this.getToken(WdlV1_1Parser.LPAREN, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	In() {
	    return this.getToken(WdlV1_1Parser.In, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(WdlV1_1Parser.RPAREN, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	inner_workflow_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Inner_workflow_elementContext);
	    } else {
	        return this.getTypedRuleContext(Inner_workflow_elementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterScatter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitScatter(this);
		}
	}


}



class ConditionalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_conditional;
    }

	IF() {
	    return this.getToken(WdlV1_1Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(WdlV1_1Parser.LPAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RPAREN() {
	    return this.getToken(WdlV1_1Parser.RPAREN, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	inner_workflow_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Inner_workflow_elementContext);
	    } else {
	        return this.getTypedRuleContext(Inner_workflow_elementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterConditional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitConditional(this);
		}
	}


}



class Workflow_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_workflow_input;
    }

	INPUT() {
	    return this.getToken(WdlV1_1Parser.INPUT, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	any_decls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Any_declsContext);
	    } else {
	        return this.getTypedRuleContext(Any_declsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterWorkflow_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitWorkflow_input(this);
		}
	}


}



class Workflow_outputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_workflow_output;
    }

	OUTPUT() {
	    return this.getToken(WdlV1_1Parser.OUTPUT, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	bound_decls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bound_declsContext);
	    } else {
	        return this.getTypedRuleContext(Bound_declsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterWorkflow_output(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitWorkflow_output(this);
		}
	}


}



class Workflow_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_workflow_element;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OutputContext extends Workflow_elementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	workflow_output() {
	    return this.getTypedRuleContext(Workflow_outputContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterOutput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitOutput(this);
		}
	}


}

WdlV1_1Parser.OutputContext = OutputContext;

class InputContext extends Workflow_elementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	workflow_input() {
	    return this.getTypedRuleContext(Workflow_inputContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInput(this);
		}
	}


}

WdlV1_1Parser.InputContext = InputContext;

class Parameter_meta_elementContext extends Workflow_elementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parameter_meta() {
	    return this.getTypedRuleContext(Parameter_metaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterParameter_meta_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitParameter_meta_element(this);
		}
	}


}

WdlV1_1Parser.Parameter_meta_elementContext = Parameter_meta_elementContext;

class Meta_elementContext extends Workflow_elementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	meta() {
	    return this.getTypedRuleContext(MetaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterMeta_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitMeta_element(this);
		}
	}


}

WdlV1_1Parser.Meta_elementContext = Meta_elementContext;

class Inner_elementContext extends Workflow_elementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inner_workflow_element() {
	    return this.getTypedRuleContext(Inner_workflow_elementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterInner_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitInner_element(this);
		}
	}


}

WdlV1_1Parser.Inner_elementContext = Inner_elementContext;

class WorkflowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_workflow;
    }

	WORKFLOW() {
	    return this.getToken(WdlV1_1Parser.WORKFLOW, 0);
	};

	Identifier() {
	    return this.getToken(WdlV1_1Parser.Identifier, 0);
	};

	LBRACE() {
	    return this.getToken(WdlV1_1Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(WdlV1_1Parser.RBRACE, 0);
	};

	workflow_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Workflow_elementContext);
	    } else {
	        return this.getTypedRuleContext(Workflow_elementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterWorkflow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitWorkflow(this);
		}
	}


}



class Document_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_document_element;
    }

	import_doc() {
	    return this.getTypedRuleContext(Import_docContext,0);
	};

	struct() {
	    return this.getTypedRuleContext(StructContext,0);
	};

	task() {
	    return this.getTypedRuleContext(TaskContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterDocument_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitDocument_element(this);
		}
	}


}



class DocumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = WdlV1_1Parser.RULE_document;
    }

	EOF() {
	    return this.getToken(WdlV1_1Parser.EOF, 0);
	};

	VERSION() {
	    return this.getToken(WdlV1_1Parser.VERSION, 0);
	};

	document_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Document_elementContext);
	    } else {
	        return this.getTypedRuleContext(Document_elementContext,i);
	    }
	};

	workflow() {
	    return this.getTypedRuleContext(WorkflowContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.enterDocument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof WdlV1_1ParserListener ) {
	        listener.exitDocument(this);
		}
	}


}




WdlV1_1Parser.Map_typeContext = Map_typeContext; 
WdlV1_1Parser.Array_typeContext = Array_typeContext; 
WdlV1_1Parser.Pair_typeContext = Pair_typeContext; 
WdlV1_1Parser.Type_baseContext = Type_baseContext; 
WdlV1_1Parser.Wdl_typeContext = Wdl_typeContext; 
WdlV1_1Parser.Unbound_declsContext = Unbound_declsContext; 
WdlV1_1Parser.Bound_declsContext = Bound_declsContext; 
WdlV1_1Parser.Any_declsContext = Any_declsContext; 
WdlV1_1Parser.NumberContext = NumberContext; 
WdlV1_1Parser.Expression_placeholder_optionContext = Expression_placeholder_optionContext; 
WdlV1_1Parser.String_partContext = String_partContext; 
WdlV1_1Parser.String_expr_partContext = String_expr_partContext; 
WdlV1_1Parser.String_expr_with_string_partContext = String_expr_with_string_partContext; 
WdlV1_1Parser.StringContext = StringContext; 
WdlV1_1Parser.Primitive_literalContext = Primitive_literalContext; 
WdlV1_1Parser.ExprContext = ExprContext; 
WdlV1_1Parser.Expr_infixContext = Expr_infixContext; 
WdlV1_1Parser.Expr_infix0Context = Expr_infix0Context; 
WdlV1_1Parser.Expr_infix1Context = Expr_infix1Context; 
WdlV1_1Parser.Expr_infix2Context = Expr_infix2Context; 
WdlV1_1Parser.Expr_infix3Context = Expr_infix3Context; 
WdlV1_1Parser.Expr_infix4Context = Expr_infix4Context; 
WdlV1_1Parser.Expr_infix5Context = Expr_infix5Context; 
WdlV1_1Parser.MemberContext = MemberContext; 
WdlV1_1Parser.Expr_coreContext = Expr_coreContext; 
WdlV1_1Parser.Import_aliasContext = Import_aliasContext; 
WdlV1_1Parser.Import_asContext = Import_asContext; 
WdlV1_1Parser.Import_docContext = Import_docContext; 
WdlV1_1Parser.StructContext = StructContext; 
WdlV1_1Parser.Meta_valueContext = Meta_valueContext; 
WdlV1_1Parser.Meta_string_partContext = Meta_string_partContext; 
WdlV1_1Parser.Meta_stringContext = Meta_stringContext; 
WdlV1_1Parser.Meta_arrayContext = Meta_arrayContext; 
WdlV1_1Parser.Meta_objectContext = Meta_objectContext; 
WdlV1_1Parser.Meta_object_kvContext = Meta_object_kvContext; 
WdlV1_1Parser.Meta_kvContext = Meta_kvContext; 
WdlV1_1Parser.Parameter_metaContext = Parameter_metaContext; 
WdlV1_1Parser.MetaContext = MetaContext; 
WdlV1_1Parser.Task_runtime_kvContext = Task_runtime_kvContext; 
WdlV1_1Parser.Task_runtimeContext = Task_runtimeContext; 
WdlV1_1Parser.Task_inputContext = Task_inputContext; 
WdlV1_1Parser.Task_outputContext = Task_outputContext; 
WdlV1_1Parser.Task_command_string_partContext = Task_command_string_partContext; 
WdlV1_1Parser.Task_command_expr_partContext = Task_command_expr_partContext; 
WdlV1_1Parser.Task_command_expr_with_stringContext = Task_command_expr_with_stringContext; 
WdlV1_1Parser.Task_commandContext = Task_commandContext; 
WdlV1_1Parser.Task_elementContext = Task_elementContext; 
WdlV1_1Parser.TaskContext = TaskContext; 
WdlV1_1Parser.Inner_workflow_elementContext = Inner_workflow_elementContext; 
WdlV1_1Parser.Call_aliasContext = Call_aliasContext; 
WdlV1_1Parser.Call_inputContext = Call_inputContext; 
WdlV1_1Parser.Call_inputsContext = Call_inputsContext; 
WdlV1_1Parser.Call_bodyContext = Call_bodyContext; 
WdlV1_1Parser.Call_afterContext = Call_afterContext; 
WdlV1_1Parser.Call_nameContext = Call_nameContext; 
WdlV1_1Parser.CallContext = CallContext; 
WdlV1_1Parser.ScatterContext = ScatterContext; 
WdlV1_1Parser.ConditionalContext = ConditionalContext; 
WdlV1_1Parser.Workflow_inputContext = Workflow_inputContext; 
WdlV1_1Parser.Workflow_outputContext = Workflow_outputContext; 
WdlV1_1Parser.Workflow_elementContext = Workflow_elementContext; 
WdlV1_1Parser.WorkflowContext = WorkflowContext; 
WdlV1_1Parser.Document_elementContext = Document_elementContext; 
WdlV1_1Parser.DocumentContext = DocumentContext; 
