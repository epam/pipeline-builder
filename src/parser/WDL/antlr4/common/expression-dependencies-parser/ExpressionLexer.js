// Generated from ./ExpressionLexer.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,47,532,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,
18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,
7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,
47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,
7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,
61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,
2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,
76,7,76,2,77,7,77,2,78,7,78,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,
1,9,1,9,1,9,1,9,1,9,3,9,215,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,
1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,4,40,292,8,40,11,40,12,40,293,
1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,
44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,3,46,321,8,46,1,46,
1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,333,8,47,3,47,335,8,47,
3,47,337,8,47,3,47,339,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,4,49,
349,8,49,11,49,12,49,350,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,
52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,3,54,374,8,54,
1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,386,8,55,3,55,388,
8,55,3,55,390,8,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,4,57,400,8,57,
11,57,12,57,401,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,
59,1,59,1,59,3,59,418,8,59,3,59,420,8,59,3,59,422,8,59,3,59,424,8,59,1,60,
1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,
63,3,63,442,8,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,4,65,451,8,65,11,65,
12,65,452,1,66,1,66,5,66,457,8,66,10,66,12,66,460,9,66,1,67,1,67,1,68,4,
68,465,8,68,11,68,12,68,466,1,69,1,69,1,69,1,69,3,69,473,8,69,1,69,3,69,
476,8,69,1,69,1,69,1,69,3,69,481,8,69,1,70,1,70,1,70,1,70,1,70,3,70,488,
8,70,3,70,490,8,70,3,70,492,8,70,3,70,494,8,70,1,71,1,71,1,72,1,72,1,73,
4,73,501,8,73,11,73,12,73,502,1,74,1,74,1,74,3,74,508,8,74,1,74,1,74,3,74,
512,8,74,1,75,1,75,1,75,1,76,1,76,3,76,519,8,76,1,76,1,76,3,76,523,8,76,
3,76,525,8,76,1,77,1,77,1,77,1,78,1,78,1,78,0,0,79,4,1,6,2,8,3,10,4,12,5,
14,6,16,7,18,8,20,9,22,10,24,11,26,12,28,13,30,14,32,15,34,16,36,17,38,18,
40,19,42,20,44,21,46,22,48,23,50,24,52,25,54,26,56,27,58,28,60,29,62,30,
64,31,66,32,68,33,70,34,72,35,74,36,76,37,78,38,80,39,82,40,84,41,86,42,
88,0,90,0,92,0,94,0,96,0,98,0,100,0,102,43,104,0,106,0,108,0,110,0,112,0,
114,0,116,0,118,0,120,0,122,44,124,0,126,0,128,0,130,45,132,46,134,47,136,
0,138,0,140,0,142,0,144,0,146,0,148,0,150,0,152,0,154,0,156,0,158,0,160,
0,4,0,1,2,3,14,3,0,9,10,13,13,32,32,6,0,10,10,13,13,36,36,39,39,123,123,
126,126,6,0,10,10,13,13,34,34,36,36,123,123,126,126,3,0,36,36,123,123,125,
126,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,8,0,34,34,39,39,92,92,
98,98,102,102,110,110,114,114,116,116,1,0,48,51,1,0,48,55,3,0,48,57,65,70,
97,102,1,0,48,57,2,0,43,43,45,45,2,0,43,43,101,101,2,0,69,69,101,101,550,
0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,
0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,
1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,
0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,
0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,
60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,
0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,
1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,0,1,88,1,0,0,0,1,90,1,0,0,0,1,92,1,0,0,0,
1,94,1,0,0,0,1,96,1,0,0,0,1,98,1,0,0,0,1,100,1,0,0,0,1,102,1,0,0,0,2,104,
1,0,0,0,2,106,1,0,0,0,2,108,1,0,0,0,2,110,1,0,0,0,2,112,1,0,0,0,2,114,1,
0,0,0,2,116,1,0,0,0,2,118,1,0,0,0,3,120,1,0,0,0,3,122,1,0,0,0,3,124,1,0,
0,0,3,126,1,0,0,0,3,128,1,0,0,0,3,130,1,0,0,0,3,132,1,0,0,0,3,134,1,0,0,
0,4,162,1,0,0,0,6,165,1,0,0,0,8,170,1,0,0,0,10,175,1,0,0,0,12,182,1,0,0,
0,14,187,1,0,0,0,16,196,1,0,0,0,18,201,1,0,0,0,20,203,1,0,0,0,22,214,1,0,
0,0,24,216,1,0,0,0,26,218,1,0,0,0,28,220,1,0,0,0,30,224,1,0,0,0,32,228,1,
0,0,0,34,230,1,0,0,0,36,232,1,0,0,0,38,234,1,0,0,0,40,236,1,0,0,0,42,238,
1,0,0,0,44,241,1,0,0,0,46,244,1,0,0,0,48,247,1,0,0,0,50,250,1,0,0,0,52,252,
1,0,0,0,54,255,1,0,0,0,56,258,1,0,0,0,58,260,1,0,0,0,60,262,1,0,0,0,62,264,
1,0,0,0,64,266,1,0,0,0,66,268,1,0,0,0,68,270,1,0,0,0,70,272,1,0,0,0,72,274,
1,0,0,0,74,276,1,0,0,0,76,278,1,0,0,0,78,280,1,0,0,0,80,282,1,0,0,0,82,286,
1,0,0,0,84,291,1,0,0,0,86,297,1,0,0,0,88,299,1,0,0,0,90,304,1,0,0,0,92,308,
1,0,0,0,94,312,1,0,0,0,96,320,1,0,0,0,98,325,1,0,0,0,100,342,1,0,0,0,102,
348,1,0,0,0,104,352,1,0,0,0,106,357,1,0,0,0,108,361,1,0,0,0,110,365,1,0,
0,0,112,373,1,0,0,0,114,378,1,0,0,0,116,393,1,0,0,0,118,399,1,0,0,0,120,
405,1,0,0,0,122,410,1,0,0,0,124,425,1,0,0,0,126,429,1,0,0,0,128,433,1,0,
0,0,130,441,1,0,0,0,132,445,1,0,0,0,134,450,1,0,0,0,136,454,1,0,0,0,138,
461,1,0,0,0,140,464,1,0,0,0,142,480,1,0,0,0,144,482,1,0,0,0,146,495,1,0,
0,0,148,497,1,0,0,0,150,500,1,0,0,0,152,511,1,0,0,0,154,513,1,0,0,0,156,
524,1,0,0,0,158,526,1,0,0,0,160,529,1,0,0,0,162,163,5,105,0,0,163,164,5,
102,0,0,164,5,1,0,0,0,165,166,5,116,0,0,166,167,5,104,0,0,167,168,5,101,
0,0,168,169,5,110,0,0,169,7,1,0,0,0,170,171,5,101,0,0,171,172,5,108,0,0,
172,173,5,115,0,0,173,174,5,101,0,0,174,9,1,0,0,0,175,176,5,111,0,0,176,
177,5,98,0,0,177,178,5,106,0,0,178,179,5,101,0,0,179,180,5,99,0,0,180,181,
5,116,0,0,181,11,1,0,0,0,182,183,5,115,0,0,183,184,5,101,0,0,184,185,5,112,
0,0,185,186,5,61,0,0,186,13,1,0,0,0,187,188,5,100,0,0,188,189,5,101,0,0,
189,190,5,102,0,0,190,191,5,97,0,0,191,192,5,117,0,0,192,193,5,108,0,0,193,
194,5,116,0,0,194,195,5,61,0,0,195,15,1,0,0,0,196,197,5,78,0,0,197,198,5,
111,0,0,198,199,5,110,0,0,199,200,5,101,0,0,200,17,1,0,0,0,201,202,3,150,
73,0,202,19,1,0,0,0,203,204,3,156,76,0,204,21,1,0,0,0,205,206,5,116,0,0,
206,207,5,114,0,0,207,208,5,117,0,0,208,215,5,101,0,0,209,210,5,102,0,0,
210,211,5,97,0,0,211,212,5,108,0,0,212,213,5,115,0,0,213,215,5,101,0,0,214,
205,1,0,0,0,214,209,1,0,0,0,215,23,1,0,0,0,216,217,5,40,0,0,217,25,1,0,0,
0,218,219,5,41,0,0,219,27,1,0,0,0,220,221,5,123,0,0,221,222,1,0,0,0,222,
223,6,12,0,0,223,29,1,0,0,0,224,225,5,125,0,0,225,226,1,0,0,0,226,227,6,
13,1,0,227,31,1,0,0,0,228,229,5,91,0,0,229,33,1,0,0,0,230,231,5,93,0,0,231,
35,1,0,0,0,232,233,5,58,0,0,233,37,1,0,0,0,234,235,5,60,0,0,235,39,1,0,0,
0,236,237,5,62,0,0,237,41,1,0,0,0,238,239,5,62,0,0,239,240,5,61,0,0,240,
43,1,0,0,0,241,242,5,60,0,0,242,243,5,61,0,0,243,45,1,0,0,0,244,245,5,61,
0,0,245,246,5,61,0,0,246,47,1,0,0,0,247,248,5,33,0,0,248,249,5,61,0,0,249,
49,1,0,0,0,250,251,5,61,0,0,251,51,1,0,0,0,252,253,5,38,0,0,253,254,5,38,
0,0,254,53,1,0,0,0,255,256,5,124,0,0,256,257,5,124,0,0,257,55,1,0,0,0,258,
259,5,63,0,0,259,57,1,0,0,0,260,261,5,42,0,0,261,59,1,0,0,0,262,263,5,43,
0,0,263,61,1,0,0,0,264,265,5,45,0,0,265,63,1,0,0,0,266,267,5,36,0,0,267,
65,1,0,0,0,268,269,5,44,0,0,269,67,1,0,0,0,270,271,5,59,0,0,271,69,1,0,0,
0,272,273,5,46,0,0,273,71,1,0,0,0,274,275,5,33,0,0,275,73,1,0,0,0,276,277,
5,126,0,0,277,75,1,0,0,0,278,279,5,47,0,0,279,77,1,0,0,0,280,281,5,37,0,
0,281,79,1,0,0,0,282,283,5,39,0,0,283,284,1,0,0,0,284,285,6,38,2,0,285,81,
1,0,0,0,286,287,5,34,0,0,287,288,1,0,0,0,288,289,6,39,3,0,289,83,1,0,0,0,
290,292,7,0,0,0,291,290,1,0,0,0,292,293,1,0,0,0,293,291,1,0,0,0,293,294,
1,0,0,0,294,295,1,0,0,0,295,296,6,40,4,0,296,85,1,0,0,0,297,298,3,136,66,
0,298,87,1,0,0,0,299,300,5,92,0,0,300,301,9,0,0,0,301,302,1,0,0,0,302,303,
6,42,5,0,303,89,1,0,0,0,304,305,5,36,0,0,305,306,1,0,0,0,306,307,6,43,5,
0,307,91,1,0,0,0,308,309,5,126,0,0,309,310,1,0,0,0,310,311,6,44,5,0,311,
93,1,0,0,0,312,313,5,123,0,0,313,314,1,0,0,0,314,315,6,45,5,0,315,95,1,0,
0,0,316,317,5,36,0,0,317,321,5,123,0,0,318,319,5,126,0,0,319,321,5,123,0,
0,320,316,1,0,0,0,320,318,1,0,0,0,321,322,1,0,0,0,322,323,6,46,0,0,323,324,
6,46,6,0,324,97,1,0,0,0,325,326,5,92,0,0,326,327,5,117,0,0,327,338,1,0,0,
0,328,336,3,146,71,0,329,334,3,146,71,0,330,332,3,146,71,0,331,333,3,146,
71,0,332,331,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,330,1,0,0,0,334,
335,1,0,0,0,335,337,1,0,0,0,336,329,1,0,0,0,336,337,1,0,0,0,337,339,1,0,
0,0,338,328,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,6,47,5,0,341,
99,1,0,0,0,342,343,5,39,0,0,343,344,1,0,0,0,344,345,6,48,1,0,345,346,6,48,
7,0,346,101,1,0,0,0,347,349,8,1,0,0,348,347,1,0,0,0,349,350,1,0,0,0,350,
348,1,0,0,0,350,351,1,0,0,0,351,103,1,0,0,0,352,353,5,92,0,0,353,354,9,0,
0,0,354,355,1,0,0,0,355,356,6,50,5,0,356,105,1,0,0,0,357,358,5,126,0,0,358,
359,1,0,0,0,359,360,6,51,5,0,360,107,1,0,0,0,361,362,5,36,0,0,362,363,1,
0,0,0,363,364,6,52,5,0,364,109,1,0,0,0,365,366,5,123,0,0,366,367,1,0,0,0,
367,368,6,53,5,0,368,111,1,0,0,0,369,370,5,36,0,0,370,374,5,123,0,0,371,
372,5,126,0,0,372,374,5,123,0,0,373,369,1,0,0,0,373,371,1,0,0,0,374,375,
1,0,0,0,375,376,6,54,0,0,376,377,6,54,6,0,377,113,1,0,0,0,378,379,5,92,0,
0,379,380,5,117,0,0,380,381,1,0,0,0,381,389,3,146,71,0,382,387,3,146,71,
0,383,385,3,146,71,0,384,386,3,146,71,0,385,384,1,0,0,0,385,386,1,0,0,0,
386,388,1,0,0,0,387,383,1,0,0,0,387,388,1,0,0,0,388,390,1,0,0,0,389,382,
1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,6,55,5,0,392,115,1,0,0,0,
393,394,5,34,0,0,394,395,1,0,0,0,395,396,6,56,1,0,396,397,6,56,8,0,397,117,
1,0,0,0,398,400,8,2,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,
401,402,1,0,0,0,402,403,1,0,0,0,403,404,6,57,5,0,404,119,1,0,0,0,405,406,
5,92,0,0,406,407,9,0,0,0,407,408,1,0,0,0,408,409,6,58,9,0,409,121,1,0,0,
0,410,411,5,92,0,0,411,412,5,117,0,0,412,423,1,0,0,0,413,421,3,146,71,0,
414,419,3,146,71,0,415,417,3,146,71,0,416,418,3,146,71,0,417,416,1,0,0,0,
417,418,1,0,0,0,418,420,1,0,0,0,419,415,1,0,0,0,419,420,1,0,0,0,420,422,
1,0,0,0,421,414,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,413,1,0,0,0,
423,424,1,0,0,0,424,123,1,0,0,0,425,426,5,126,0,0,426,427,1,0,0,0,427,428,
6,60,9,0,428,125,1,0,0,0,429,430,5,36,0,0,430,431,1,0,0,0,431,432,6,61,9,
0,432,127,1,0,0,0,433,434,5,123,0,0,434,435,1,0,0,0,435,436,6,62,9,0,436,
129,1,0,0,0,437,438,5,36,0,0,438,442,5,123,0,0,439,440,5,126,0,0,440,442,
5,123,0,0,441,437,1,0,0,0,441,439,1,0,0,0,442,443,1,0,0,0,443,444,6,63,0,
0,444,131,1,0,0,0,445,446,5,125,0,0,446,447,1,0,0,0,447,448,6,64,10,0,448,
133,1,0,0,0,449,451,8,3,0,0,450,449,1,0,0,0,451,452,1,0,0,0,452,450,1,0,
0,0,452,453,1,0,0,0,453,135,1,0,0,0,454,458,3,138,67,0,455,457,3,140,68,
0,456,455,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,137,
1,0,0,0,460,458,1,0,0,0,461,462,7,4,0,0,462,139,1,0,0,0,463,465,7,5,0,0,
464,463,1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,141,
1,0,0,0,468,469,5,92,0,0,469,481,7,6,0,0,470,475,5,92,0,0,471,473,7,7,0,
0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,0,0,0,474,476,7,8,0,0,475,472,
1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,481,7,8,0,0,478,479,5,92,0,0,
479,481,3,144,70,0,480,468,1,0,0,0,480,470,1,0,0,0,480,478,1,0,0,0,481,143,
1,0,0,0,482,493,5,117,0,0,483,491,3,146,71,0,484,489,3,146,71,0,485,487,
3,146,71,0,486,488,3,146,71,0,487,486,1,0,0,0,487,488,1,0,0,0,488,490,1,
0,0,0,489,485,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,484,1,0,0,0,491,
492,1,0,0,0,492,494,1,0,0,0,493,483,1,0,0,0,493,494,1,0,0,0,494,145,1,0,
0,0,495,496,7,9,0,0,496,147,1,0,0,0,497,498,7,10,0,0,498,149,1,0,0,0,499,
501,3,148,72,0,500,499,1,0,0,0,501,502,1,0,0,0,502,500,1,0,0,0,502,503,1,
0,0,0,503,151,1,0,0,0,504,505,3,150,73,0,505,507,5,46,0,0,506,508,3,150,
73,0,507,506,1,0,0,0,507,508,1,0,0,0,508,512,1,0,0,0,509,510,5,46,0,0,510,
512,3,150,73,0,511,504,1,0,0,0,511,509,1,0,0,0,512,153,1,0,0,0,513,514,7,
11,0,0,514,515,3,150,73,0,515,155,1,0,0,0,516,518,3,150,73,0,517,519,3,160,
78,0,518,517,1,0,0,0,518,519,1,0,0,0,519,525,1,0,0,0,520,522,3,152,74,0,
521,523,3,160,78,0,522,521,1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,516,
1,0,0,0,524,520,1,0,0,0,525,157,1,0,0,0,526,527,7,12,0,0,527,528,3,156,76,
0,528,159,1,0,0,0,529,530,7,13,0,0,530,531,3,154,75,0,531,161,1,0,0,0,38,
0,1,2,3,214,293,320,332,334,336,338,350,373,385,387,389,401,417,419,421,
423,441,452,458,466,472,475,480,487,489,491,493,502,507,511,518,522,524,
11,5,0,0,4,0,0,5,1,0,5,2,0,0,1,0,7,43,0,7,45,0,7,39,0,7,40,0,7,47,0,2,0,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ExpressionLexer extends antlr4.Lexer {

    static grammarFileName = "ExpressionLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS" ];
	static modeNames = [ "DEFAULT_MODE", "SquoteInterpolatedString", "DquoteInterpolatedString", 
                      "CurlyCommand" ];
	static literalNames = [ null, "'if'", "'then'", "'else'", "'object'", "'sep='", 
                         "'default='", "'None'", null, null, null, "'('", 
                         "')'", null, null, "'['", "']'", "':'", "'<'", 
                         "'>'", "'>='", "'<='", "'=='", "'!='", "'='", "'&&'", 
                         "'||'", "'?'", "'*'", "'+'", "'-'", null, "','", 
                         "';'", "'.'", "'!'", null, "'/'", "'%'" ];
	static symbolicNames = [ null, "IF", "THEN", "ELSE", "OBJECTLITERAL", "SEPEQUAL", 
                          "DEFAULTEQUAL", "NONELITERAL", "IntLiteral", "FloatLiteral", 
                          "BoolLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                          "LBRACK", "RBRACK", "COLON", "LT", "GT", "GTE", 
                          "LTE", "EQUALITY", "NOTEQUAL", "EQUAL", "AND", 
                          "OR", "OPTIONAL", "STAR", "PLUS", "MINUS", "DOLLAR", 
                          "COMMA", "SEMI", "DOT", "NOT", "TILDE", "DIVIDE", 
                          "MOD", "SQUOTE", "DQUOTE", "WHITESPACE", "Identifier", 
                          "StringPart", "CommandUnicodeEscape", "StringCommandStart", 
                          "EndCommand", "CommandStringPart" ];
	static ruleNames = [ "IF", "THEN", "ELSE", "OBJECTLITERAL", "SEPEQUAL", 
                      "DEFAULTEQUAL", "NONELITERAL", "IntLiteral", "FloatLiteral", 
                      "BoolLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "COLON", "LT", "GT", "GTE", "LTE", 
                      "EQUALITY", "NOTEQUAL", "EQUAL", "AND", "OR", "OPTIONAL", 
                      "STAR", "PLUS", "MINUS", "DOLLAR", "COMMA", "SEMI", 
                      "DOT", "NOT", "TILDE", "DIVIDE", "MOD", "SQUOTE", 
                      "DQUOTE", "WHITESPACE", "Identifier", "SQuoteEscapedChar", 
                      "SQuoteDollarString", "SQuoteTildeString", "SQuoteCurlyString", 
                      "SQuoteCommandStart", "SQuoteUnicodeEscape", "EndSquote", 
                      "StringPart", "DQuoteEscapedChar", "DQuoteTildeString", 
                      "DQuoteDollarString", "DQUoteCurlString", "DQuoteCommandStart", 
                      "DQuoteUnicodeEscape", "EndDQuote", "DQuoteStringPart", 
                      "CommandEscapedChar", "CommandUnicodeEscape", "CommandTildeString", 
                      "CommandDollarString", "CommandCurlyString", "StringCommandStart", 
                      "EndCommand", "CommandStringPart", "CompleteIdentifier", 
                      "IdentifierStart", "IdentifierFollow", "EscapeSequence", 
                      "UnicodeEsc", "HexDigit", "Digit", "Digits", "Decimals", 
                      "SignedDigits", "FloatFragment", "SignedFloatFragment", 
                      "EXP" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ExpressionLexer.EOF = antlr4.Token.EOF;
ExpressionLexer.IF = 1;
ExpressionLexer.THEN = 2;
ExpressionLexer.ELSE = 3;
ExpressionLexer.OBJECTLITERAL = 4;
ExpressionLexer.SEPEQUAL = 5;
ExpressionLexer.DEFAULTEQUAL = 6;
ExpressionLexer.NONELITERAL = 7;
ExpressionLexer.IntLiteral = 8;
ExpressionLexer.FloatLiteral = 9;
ExpressionLexer.BoolLiteral = 10;
ExpressionLexer.LPAREN = 11;
ExpressionLexer.RPAREN = 12;
ExpressionLexer.LBRACE = 13;
ExpressionLexer.RBRACE = 14;
ExpressionLexer.LBRACK = 15;
ExpressionLexer.RBRACK = 16;
ExpressionLexer.COLON = 17;
ExpressionLexer.LT = 18;
ExpressionLexer.GT = 19;
ExpressionLexer.GTE = 20;
ExpressionLexer.LTE = 21;
ExpressionLexer.EQUALITY = 22;
ExpressionLexer.NOTEQUAL = 23;
ExpressionLexer.EQUAL = 24;
ExpressionLexer.AND = 25;
ExpressionLexer.OR = 26;
ExpressionLexer.OPTIONAL = 27;
ExpressionLexer.STAR = 28;
ExpressionLexer.PLUS = 29;
ExpressionLexer.MINUS = 30;
ExpressionLexer.DOLLAR = 31;
ExpressionLexer.COMMA = 32;
ExpressionLexer.SEMI = 33;
ExpressionLexer.DOT = 34;
ExpressionLexer.NOT = 35;
ExpressionLexer.TILDE = 36;
ExpressionLexer.DIVIDE = 37;
ExpressionLexer.MOD = 38;
ExpressionLexer.SQUOTE = 39;
ExpressionLexer.DQUOTE = 40;
ExpressionLexer.WHITESPACE = 41;
ExpressionLexer.Identifier = 42;
ExpressionLexer.StringPart = 43;
ExpressionLexer.CommandUnicodeEscape = 44;
ExpressionLexer.StringCommandStart = 45;
ExpressionLexer.EndCommand = 46;
ExpressionLexer.CommandStringPart = 47;

ExpressionLexer.COMMENTS = 2;

ExpressionLexer.SquoteInterpolatedString = 1;
ExpressionLexer.DquoteInterpolatedString = 2;
ExpressionLexer.CurlyCommand = 3;




